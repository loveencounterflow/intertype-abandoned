{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,UAAA,EAAA,KAAA,EAAA,OAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,QAAA,EAAA,UAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA;IAAA;+DAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,CAAA,CAAE,MAAF,EACE,EADF,CAAA,GAC4B,GAD5B;;EAEA,OAAA,GAA4B,OAAA,CAAQ,oBAAR,EAf5B;;;EAiBA,CAAA,CAAE,OAAF,CAAA,GAA4B,OAAA,CAAQ,MAAR,CAA5B;;EACA,KAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;WAAS,OAAA,CAAQ,CAAR,EAAW;MAAE,MAAA,EAAQ,IAAV;MAAe,WAAA,EAAa,KAA5B;MAAsC,cAAA,EAAgB,KAAtD;MAAgE,KAAA,EAAO;IAAvE,CAAX;EAAT;;EAC5B,IAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,KAAA,CAAM,CAAN,CAAF,CAAa;EAAtB,EAnB5B;;;EAqBA,QAAA,GAA4B,MAAA,CAAO,UAAP;;EAC5B,IAAC,CAAA,iBAAD,GAA4B,EAtB5B;;;EAyBA,UAAA,GAOE,CAAA;;;;;;;IAAA,GAAA,EAAsB,KAAtB;IACA,OAAA,EAAsB,SADtB;IAEA,MAAA,EAAsB,QAFtB;IAGA,QAAA,EAAsB,UAHtB;IAIA,SAAA,EAAsB,WAJtB;;IAMA,kBAAA,EAAsB,mBANtB;IAOA,QAAA,EAAsB,UAPtB;IAQA,aAAA,EAAsB,aARtB;IASA,OAAA,EAAsB,OATtB;IAUA,QAAA,EAAsB,QAVtB;IAWA,YAAA,EAAsB,KAXtB;IAYA,OAAA,EAAsB,OAZtB;IAaA,WAAA,EAAsB,WAbtB;IAcA,IAAA,EAAsB,MAdtB;IAeA,IAAA,EAAsB,MAftB;IAgBA,MAAA,EAAsB,QAhBtB;IAiBA,IAAA,EAAsB;EAjBtB,EAhCF;;;;;;;EAuDA,UAAA,GAAc,CAAA,EAvDd;;;;;EA6DA,IAAC,CAAA,OAAD,GAAW,QAAA,CAAE,CAAF,CAAA;AACT,QAAA,KAAA,EAAA,GAAA,EAAA;IAAA,IAAkE,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAA,KAAgC,CAAlG;MAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,gCAAA,CAAA,CAAmC,KAAnC,CAAA,CAAV,EAAN;;AACA,qEAA4C;EAFnC,EA7DX;;;EAmEA,gBAAA,GAAmB,QAAA,CAAE,IAAF,CAAA,EAAA;;AAEjB,QAAA,WAAA,EAAA;IAAA,WAAA;AAAc,cAAO,IAAI,CAAC,MAAZ;AAAA,aACP,CADO;iBACA;AADA,aAEP,CAFO;iBAEA,CAAA,CAAA,CAAG,GAAA,CAAI,IAAM,CAAA,CAAA,CAAV,CAAH,CAAA;AAFA;iBAGP,CAAA,CAAA,CAAG,GAAA,CAAI,IAAJ,CAAH,CAAA;AAHO;;IAId,YAAA;AAAe,cAAO,WAAW,CAAC,MAAnB;AAAA,aACR,CADQ;iBACD;AADC;iBAER,GAAA,GAAM;AAFE;;AAGf,WAAO,CAAE,WAAF,EAAe,YAAf;EATU,EAnEnB;;;;EAgFA,IAAC,CAAA,QAAD,GAAY,QAAA,CAAE,IAAF,EAAQ,UAAU,IAAlB,CAAA;AACV,QAAA;IAAA,IAAyD,6BAAzD;MAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,oBAAA,CAAA,CAAuB,GAAA,CAAI,IAAJ,CAAvB,CAAA,CAAV,EAAN;;AACA,WAAO,CAAE,CAAF,EAAA,GAAK,IAAL,CAAA,GAAA,EAAA;;AACL,UAAA,KAAA,EAAA,WAAA,EAAA,MAAA,EAAA,WAAA,EAAA;MAAA,WAAA,GAAc;AACd;QACE,MAAA,GAAS,MAAA,CAAO,CAAP,EAAU,GAAA,IAAV,EADX;OAAA,cAAA;QAEM;QACJ,WAAA,GAAc,KAAK,CAAC,OAAN,GAAgB,KAHhC;OADA;;MAMA,IAAA,CAAO,MAAP;QAEE,CAAA,CAAE,WAAF,EAAe,YAAf,CAAA,GAAiC,gBAAA,CAAiB,IAAjB,CAAjC;QACA,IAAG,eAAH;UACE,OAAA,GAAU,OAAO,CAAC,OAAR,CAAgB,SAAhB,EAAgC,IAAhC;UACV,OAAA,GAAU,OAAO,CAAC,OAAR,CAAgB,UAAhB,EAAgC,GAAA,CAAI,CAAJ,CAAhC;UACV,OAAA,GAAU,OAAO,CAAC,OAAR,CAAgB,SAAhB,EAAgC,WAAhC;UACV,OAAA,GAAU,OAAO,CAAC,OAAR,CAAgB,UAAhB,EAAgC,YAAhC,EAJZ;SAAA,MAAA;UAME,OAAA,GAAU,CAAA,kBAAA,CAAA,CAAqB,IAArB,CAA0B,QAA1B,CAAA,CAAoC,GAAG,CAAC,OAAJ,CAAY,CAAZ,CAApC,CAAA,CAAA,CAAoD,YAApD,CAAiE,SAAjE,CAAA,CAA4E,IAAA,CAAK,CAAL,CAA5E,CAAmF,CAAnF,EANZ;;QAOA,MAAM,IAAI,KAAJ,CAAU,WAAA,GAAc,OAAxB,EAVR;;AAWA,aAAO;IAlBF;EAFG,EAhFZ;;;;;EA0GA,IAAC,CAAA,QAAD,GAAY,QAAA,CAAE,IAAF,EAAQ,QAAR,EAAkB,MAAlB,CAAA;AACV,QAAA,KAAA,EAAA,KAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA;AAAA,YAAO,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAP;AAAA,WACO,CADP;QACc,CAAE,IAAF,EAAQ,QAAR,EAAkB,MAAlB,CAAA,GAA8B,CAAE,IAAF,EAAQ,IAAR,EAAc,QAAd;AAArC;AADP,WAEO,CAFP;QAEc;AAAP;AAFP;QAGO,MAAM,IAAI,KAAJ,CAAU,CAAA,sCAAA,CAAA,CAAyC,KAAzC,CAAA,CAAV;AAHb;IAIA,QAAA,GAAY;MAAE,SAAA,EAAW,KAAb;MAAoB,OAAA,kIAAgE;IAApF;IACZ,QAAA,GAAe,gBAAH,GAAoB,MAAA,CAAO,CAAA,CAAP,EAAW,QAAX,EAAqB,QAArB,CAApB,GAAyD,SALrE;;IAOA,IAAA,CAAO,CAAE,KAAA,GAAQ,GAAG,CAAC,QAAJ,CAAa,IAAb,CAAV,CAAP;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,uCAAA,CAAA,CAA0C,GAAA,CAAI,KAAJ,CAA1C,CAAA,CAAV,EADR;;IAEA,IAAA,CAAO,CAAE,KAAA,GAAQ,GAAG,CAAC,YAAJ,CAAiB,MAAjB,CAAV,CAAP;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,6CAAA,CAAA,CAAgD,GAAA,CAAI,KAAJ,CAAhD,CAAA,CAAV,EADR;KATA;;IAYA,IAAG,CAAE,CAAI,QAAQ,CAAC,SAAf,CAAA,IAA+B,CAAE,IAAG,CAAA,IAAA,CAAH,KAAe,MAAjB,CAAlC;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,KAAA,CAAA,CAAQ,GAAA,CAAI,IAAJ,CAAR,CAAiB,gBAAjB,CAAV,EADR;KAZA;;IAeA,MAAA,GAAY,MAAM,CAAC,IAAP,CAAY,IAAZ,EAfZ;;;IAkBA,IAAG,wCAAH;MACE,IAAC,CAAA,aAAD,CAAe,IAAf,EAAqB,SAArB,EADF;KAlBA;;;IAsBA,IAAG,CAAA,IAAA,CAAH,GAAY,CAAE,CAAF,EAAA,GAAK,IAAL,CAAA,GAAA,EAAA;;AACV,UAAA,CAAA,EAAA,WAAA,EAAA;MAAA,CAAA,GAAI,MAAA,CAAO,CAAP,EAAU,GAAA,IAAV;MACJ,IAAG,CAAE,CAAI,CAAN,CAAA,IAAc,CAAE,IAAC,CAAA,iBAAD,GAAqB,CAAvB,CAAjB;QAEE,CAAA,CAAE,WAAF,EAAe,YAAf,CAAA,GAAiC,gBAAA,CAAiB,IAAjB,CAAjC;QACA,MAAM,IAAI,KAAJ,CAAU,CAAA,mBAAA,CAAA,CAAsB,IAAtB,CAAA,CAAA,CAA6B,YAA7B,CAA0C,EAA1C,CAAA,CAA8C,IAAA,CAAK,CAAL,CAA9C,CAAA,CAAV,EAHR;;AAIA,aAAO;IANG;IAOZ,IAAG,CAAA,IAAA,CAAQ,CAAA,QAAA,CAAX,GAAwB,KA7BxB;;;IAgCA,IAAC,CAAA,QAAU,CAAA,IAAA,CAAX,GAAoB,CAAE,CAAF,EAAA,GAAK,CAAL,CAAA,GAAA;MAClB,IAAC,CAAA,iBAAD,IAAsB,CAAC;AACvB;QACE,CAAE,IAAC,CAAA,QAAD,CAAU,IAAV,CAAF,CAAA,CAAmB,CAAnB,EAAsB,GAAA,CAAtB,EADF;OAAA;;QAIE,IAAC,CAAA,iBAAD,IAAsB,CAAC,EAJzB;;AAKA,aAAO;IAPW,EAhCpB;;;IA0CG,CAAA,CAAE,CAAF,CAAA,GAAA;AACD,UAAA;MAAA,IAAG,CAAA,KAAK,IAAR;eACE,IAAC,CAAA,qBAAuB,CAAA,IAAA,CAAxB,GAAiC,KADnC;OAAA,MAAA;AAGE,gBAAO,SAAA,GAAY,IAAC,CAAA,OAAD,CAAS,CAAT,CAAnB;AAAA,eACO,MADP;mBACuB,IAAC,CAAA,qBAAuB,CAAA,IAAA,CAAxB,GAAiC,QAAA,CAAE,CAAF,CAAA;qBAAS,CAAG,CAAA,CAAA;YAAZ;AADxD,eAEO,UAFP;mBAEuB,IAAC,CAAA,qBAAuB,CAAA,IAAA,CAAxB,GAAiC;AAFxD;YAGO,MAAM,IAAI,KAAJ,CAAU,CAAA,8DAAA,CAAA,CAAiE,SAAjE,CAAA,CAAV;AAHb,SAHF;;IADC,CAAA,CAAH,CAAS,QAAQ,CAAC,OAAlB,EA1CA;;AAmDA,WAAO;EApDG,EA1GZ;;;;;;EAqKA,IAAC,CAAA,UAAD,GACE;IAAA,QAAA,EAAoB,UAApB;IACA,iBAAA,EAAoB;EADpB,EAtKF;;;;;;;;;EA+KA,IAAC,CAAA,aAAD,GAAiB,QAAA,CAAE,OAAF,EAAW,SAAX,CAAA;AAEf,QAAA,KAAA,EAAA;IAAA,IAAmE,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAA,KAAiC,CAApG;;MAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,iCAAA,CAAA,CAAoC,KAApC,CAAA,CAAV,EAAN;;IACA,IAAmE,CAAE,IAAA,GAAO,IAAC,CAAA,OAAD,CAAS,OAAT,CAAT,CAAA,KAAiC,MAApG;MAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,8BAAA,CAAA,CAAiC,IAAjC,CAAA,CAAV,EAAN;;IACA,IAAmE,CAAE,IAAA,GAAO,IAAC,CAAA,OAAD,CAAS,SAAT,CAAT,CAAA,KAAiC,MAApG;MAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,8BAAA,CAAA,CAAiC,IAAjC,CAAA,CAAV,EAAN;;IACA,IAAG,gCAAH;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,eAAA,CAAA,CAAkB,GAAA,CAAI,OAAJ,CAAlB,CAA8B,0BAA9B,CAAA,CAA0D,GAAA,CAAI,SAAJ,CAA1D,CAAwE,CAAxE,CAAV,EADR;;IAEA,IAAC,CAAA,UAAY,CAAA,OAAA,CAAb,GAAyB;AACzB,WAAO;EARQ,EA/KjB;;;EA0LA,IAAC,CAAA,OAAD,GAAW,QAAA,CAAE,OAAF,EAAW,SAAX,CAAA;AAET,QAAA,KAAA,EAAA;IAAA,IAAmE,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAA,KAAiC,CAApG;;MAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,iCAAA,CAAA,CAAoC,KAApC,CAAA,CAAV,EAAN;;IACA,IAAmE,CAAE,IAAA,GAAO,IAAC,CAAA,OAAD,CAAS,OAAT,CAAT,CAAA,KAAiC,MAApG;MAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,8BAAA,CAAA,CAAiC,IAAjC,CAAA,CAAV,EAAN;;IACA,IAAmE,CAAE,IAAA,GAAO,IAAC,CAAA,OAAD,CAAS,SAAT,CAAT,CAAA,KAAiC,MAApG;MAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,8BAAA,CAAA,CAAiC,IAAjC,CAAA,CAAV,EAAN;;AACA,WAAO,IAAC,CAAA,QAAD,CAAU,OAAV,EAAmB,SAAnB,EAA8B,CAAE,OAAF,CAA9B;EALE,EA1LX;;;EAkMA,IAAC,CAAA,QAAD,GAAY,QAAA,CAAE,OAAF,EAAW,SAAX,EAAsB,KAAtB,CAAA;AACV,QAAA;IAAA,IAAe,OAAA,KAAW,SAA1B;AAAA,aAAO,KAAP;;IACA,IAAoB,iDAApB;AAAA,aAAO,MAAP;;IACA,IAAG,aAAgB,KAAhB,EAAA,YAAA,MAAH;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,oCAAA,CAAA,CAAuC,GAAA,CAAI,KAAJ,CAAvC,CAAA,CAAV,EADR;;IAEA,KAAK,CAAC,IAAN,CAAW,YAAX;IACA,IAAe,YAAA,KAAgB,SAA/B;AAAA,aAAO,KAAP;;AACA,WAAO,IAAC,CAAA,QAAD,CAAU,YAAV,EAAwB,SAAxB,EAAmC,KAAnC;EAPG,EAlMZ;;;;;EA6MA,IAAC,CAAA,YAAD,GAAgB,QAAA,CAAE,CAAF,CAAA;WAAS,IAAC,CAAA,iBAAD,CAAmB,IAAC,CAAA,OAAD,CAAS,CAAT,CAAnB;EAAT,EA7MhB;;;EAgNA,IAAC,CAAA,iBAAD,GAAqB,QAAA,CAAE,IAAF,CAAA;AACnB,QAAA;IAAA,IAAmB,2CAAnB;AAAA,aAAO,KAAP;;AACA,WAAO,IAAC,CAAA,iBAAD,CAAmB,SAAnB;EAFY,EAhNrB;;;;;;;EA0NA,IAAC,CAAA,qBAAD,GACE;IAAA,IAAA,EAAY,QAAZ;;IAEA,MAAA,EAAY,QAFZ;IAGA,GAAA,EAAY,MAHZ;IAIA,GAAA,EAAY,MAJZ;;IAMA,MAAA,EAAY,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,IAAC,CAAA,WAAD,CAAa,CAAb,CAAF,CAAkB,CAAC;IAA5B,CANZ;IAOA,GAAA,EAAY,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,IAAC,CAAA,OAAD,CAAa,CAAb,CAAF,CAAkB,CAAC;IAA5B,CAPZ;;IASA,IAAA,EAAY,QAAA,CAAE,CAAF,EAAK,WAAW,WAAhB,CAAA;AACV,UAAA;AAAA,cAAO,QAAP;AAAA,aACO,YADP;AACyB,iBAAO,CAAE,KAAK,CAAC,IAAN,CAAW,CAAX,CAAF,CAAgB,CAAC;AADjD,aAEO,WAFP;AAEyB,iBAAO,CAAC,CAAC;AAFlC,aAGO,OAHP;AAGyB,iBAAO,MAAM,CAAC,UAAP,CAAkB,CAAlB,+GAAiD,OAAjD;AAHhC;UAIO,MAAM,IAAI,KAAJ,CAAU,CAAA,0BAAA,CAAA,CAA6B,GAAA,CAAI,QAAJ,CAA7B,CAAA,CAAV;AAJb;IADU;EATZ,EA3NF;;;EA4OA,IAAC,CAAA,OAAD,GAAW,QAAA,CAAE,CAAF,EAAA,GAAK,CAAL,CAAA;AAMT,QAAA,MAAA,EAAA,IAAA;;;;;;IAAA,IAAA,GAAO,GAAG,CAAC,OAAJ,CAAY,CAAZ;IACP,IAAA,CAAO,CAAE,IAAC,CAAA,QAAD,CAAU,CAAE,MAAA,GAAS,IAAC,CAAA,qBAAuB,CAAA,IAAA,CAAnC,CAAV,CAAF,CAAP;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,+BAAA,CAAA,CAAkC,IAAlC,CAAA,CAAV,EADR;;AAEA,WAAO,MAAA,CAAO,CAAP,EAAU,GAAA,CAAV;EATE,EA5OX;;;EAwPA,IAAC,CAAA,QAAD,GAAc,QAAA,CAAE,UAAF,CAAA;WAAkB,UAAY,CAAA,CAAA;EAA9B;;EACd,IAAC,CAAA,OAAD,GAAc,QAAA,CAAE,UAAF,CAAA;WAAkB,UAAY,CAAA,UAAU,CAAC,MAAX,GAAoB,CAApB;EAA9B,EAzPd;;;EA4PA,IAAC,CAAA,QAAD,GAAY,QAAA,CAAE,CAAF,CAAA;AACV,QAAA;IAAA,IAAO,CAAE,IAAA,GAAO,IAAC,CAAA,YAAD,CAAc,CAAd,CAAT,CAAA,KAA8B,UAArC;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,kCAAA,CAAA,CAAqC,IAArC,CAAA,CAAV,EADR;;AAEA,WAAO,CAAC,CAAC;EAHC,EA5PZ;;;;;EAqQA,IAAC,CAAA,OAAD,GAAwB,QAAA,CAAA,GAAE,CAAF,CAAA;WAAY,IAAC,CAAA,SAAD,CAAW,IAAC,CAAA,YAAD,CAAmB,GAAA,CAAnB,CAAX;EAAZ;;EACxB,IAAC,CAAA,WAAD,GAAwB,QAAA,CAAA,GAAE,CAAF,CAAA;WAAY,IAAC,CAAA,SAAD,CAAW,IAAC,CAAA,gBAAD,CAAmB,GAAA,CAAnB,CAAX;EAAZ;;EACxB,IAAC,CAAA,eAAD,GAAwB,QAAA,CAAE,CAAF,CAAA;IAAY,IAAG,SAAH;aAAW,MAAM,CAAC,mBAAP,CAA2B,CAA3B,EAAX;KAAA,MAAA;aAA6C,GAA7C;;EAAZ;;EACxB,IAAC,CAAA,oBAAD,GAAwB,SAAA,CAAE,CAAF,CAAA;AAAY,QAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAQ;AAAA;IAAA,KAAA,qCAAA;;mBAAR,CAAA,MAAM,CAAN;IAAQ,CAAA;;EAApB,EAxQxB;;;EA2QA,IAAC,CAAA,YAAD,GAAgB,SAAA,CAAE,CAAF,EAAK,QAAL,CAAA;AACd,QAAA,QAAA,EAAA,CAAA,EAAA;IAAA,QAAA,GAAW;MAAE,cAAA,EAAgB;IAAlB;IACX,QAAA,GAAc,gBAAH,GAAoB,MAAA,CAAO,CAAA,CAAP,EAAW,QAAX,EAAqB,QAArB,CAApB,GAAyD;AACpE;IAAA,KAAA,MAAA;MAEE,IAAY,CAAE,CAAG,CAAA,CAAA,CAAH,KAAU,MAAZ,CAAA,IAA4B,QAAQ,CAAC,cAAjD;;AAAA,iBAAA;;mBACA,CAAA,MAAM,CAAN;IAHF,CAAA;;EAHc,EA3QhB;;;EAoRA,IAAC,CAAA,gBAAD,GAAoB,QAAA,CAAE,CAAF,EAAK,QAAL,CAAA;AAClB,QAAA;IAAA,QAAA,GAAW;MAAE,WAAA,EAAa,IAAf;MAAqB,cAAA,EAAgB;IAArC;IACX,QAAA,GAAc,gBAAH,GAAoB,MAAA,CAAO,CAAA,CAAP,EAAW,QAAX,EAAqB,QAArB,CAApB,GAAyD;AACpE,WAAO,IAAC,CAAA,iBAAD,CAAmB,CAAnB,EAAsB,IAAI,GAAJ,CAAA,CAAtB,EAAiC,QAAjC;EAHW,EApRpB;;;EA0RA,IAAC,CAAA,iBAAD,GAAqB,SAAA,CAAE,CAAF,EAAK,IAAL,EAAW,QAAX,CAAA,EAAA;;;AACnB,QAAA,KAAA,EAAA,CAAA,EAAA,KAAA,EAAA,GAAA,EAAA;IAAA,IAAG,CAAE,CAAI,QAAQ,CAAC,WAAf,CAAA,IAAiC,CAAA,KAAK,MAAM,CAAA,SAA/C;AACE,aADF;;AAGA;;IAAA,KAAA,QAAA;MACE,IAAY,IAAI,CAAC,GAAL,CAAS,CAAT,CAAZ;AAAA,iBAAA;;MACA,IAAI,CAAC,GAAL,CAAS,CAAT;AAGA;QAAI,KAAA,GAAQ,CAAG,CAAA,CAAA,EAAf;OAAA,cAAA;QAAyB;AAAW,iBAApC;;MACA,IAAY,CAAE,KAAA,KAAS,MAAX,CAAA,IAA2B,QAAQ,CAAC,cAAhD;AAAA,iBAAA;;MACA,IAAG,uBAAH;QACE,IAAgB,aAAhB;AAAA,mBAAA;;QACA,IAAA,CAAgB,KAAO,CAAA,QAAQ,CAAC,MAAT,CAAvB;AAAA,mBAAA;SAFF;;MAGA,MAAM;IAVR,CAHA;;IAeA,IAAG,0CAAH;aACE,CAAA,OAAW,IAAC,CAAA,iBAAD,CAAmB,KAAnB,EAA0B,IAA1B,EAAgC,QAAhC,CAAX,EADF;;EAhBmB,EA1RrB;;;;EA+SA,IAAC,CAAA,SAAD,GAAa,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,GAAA,CAAF;EAAT,EA/Sb;;;EAkTA,IAAC,CAAA,QAAD,GAAY,QAAA,CAAE,CAAF,EAAA,GAAK,CAAL,CAAA;AAEV,QAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;IAAA,IAAoB,SAApB;;AAAA,aAAO,MAAP;;0BACA;IAAA,KAAA,qCAAA;;MAEE,IAAgB,CAAG,CAAA,GAAA,CAAH,KAAY,MAA5B;;AAAA,eAAO,MAAP;;IAFF;AAGA,WAAO;EANG,EAlTZ;;;EA2TA,IAAC,CAAA,aAAD,GAAiB,QAAA,CAAE,CAAF,EAAA,GAAK,CAAL,CAAA;AACf,QAAA,IAAA,EAAA;IAAA,MAAA,GAAU,CAAE,OAAA,CAAQ,CAAR,CAAF,CAAa,CAAC,IAAd,CAAA;IACV,IAAA,GAAU,CAAE,IAAC,CAAA,SAAD,CAAW,IAAC,CAAA,OAAD,CAAS,CAAT,CAAX,CAAF,CAAyB,CAAC,IAA1B,CAAA;AACV,WAAO,GAAG,CAAC,MAAJ,CAAW,MAAX,EAAmB,IAAnB;EAHQ,EA3TjB;;;EAiUA,IAAC,CAAA,WAAD,GAAe,QAAA,CAAA,CAAA;WAAG;MAAE,GAAA,CAAE,IAAC,CAAA,gBAAD,CAAkB,IAAlB;MAAqB;QAAE,MAAA,EAAQ;MAAV,CAArB,CAAF,CAAF;;EAAH,EAjUf;;;;;EAuUA,GAAA,GAAM,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACJ,QAAA,KAAA,EAAA;IAAA,IAAqB,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAA,KAAgC,CAArD;AAAA,aAAO,IAAC,CAAA,OAAD,CAAS,CAAT,EAAP;;IACA,IAAmE,KAAA,KAAS,CAA5E;MAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,iCAAA,CAAA,CAAoC,KAApC,CAAA,CAAV,EAAN;;IACA,IAAmE,CAAE,IAAA,GAAO,IAAC,CAAA,OAAD,CAAS,IAAT,CAAT,CAAA,KAA4B,MAA/F;MAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,8BAAA,CAAA,CAAiC,IAAjC,CAAA,CAAV,EAAN;;IACA,IAAmE,6BAAnE;MAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,oBAAA,CAAA,CAAuB,GAAA,CAAI,IAAJ,CAAvB,CAAA,CAAV,EAAN;;AACA,WAAO,MAAA,CAAO,CAAP;EALH,EAvUN;;;;;EAkVA,GAAA,GAAkB,GAAG,CAAC,IAAJ,CAAS,IAAT;;EAClB,MAAM,CAAC,OAAP,GAAkB;;EAEf,CAAA,CAAA,CAAA,GAAA;AAED,QAAA,OAAA,EAAA,UAAA,EAAA,QAAA,EAAA,QAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA;;IAAA,KAAA,sBAAA;sCAAA;;MAEE,IAAG,4BAAH;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,qCAAA,CAAA,CAAwC,GAAA,CAAI,QAAJ,CAAxC,CAAA,CAAV,EADR;;MAEA,UAAY,CAAA,QAAA,CAAZ,GAAyB;IAJ3B;AAQA;;;IAAA,KAAA,UAAA;uBAAA;;MAEE,IAAG,GAAG,CAAC,YAAJ,CAAiB,KAAjB,CAAH;QACE,GAAK,CAAA,GAAA,CAAL,GAAa,KAAK,CAAC,IAAN,CAAW,GAAX,EADf;OAAA,MAAA;QAGE,GAAK,CAAA,GAAA,CAAL,GAAa,MAHf;;IAFF,CARA;;IAgBA,KAAA,sBAAA;;MAEE,IAAY,sBAAZ;;AAAA,iBAAA;;MACA,OAAA,GAAU,CAAA,IAAA,CAAA,CAAO,QAAP,CAAA,EADV;;MAGA,IAAO,CAAE,IAAA,GAAO,GAAG,CAAC,OAAJ,CAAY,CAAE,UAAA,GAAa,GAAK,CAAA,OAAA,CAApB,CAAZ,CAAT,CAAA,KAA0D,UAAjE;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,qCAAA,CAAA,CAAuC,OAAvC,CAA+C,YAA/C,CAAA,CAA4D,IAA5D,CAAA,CAAV,EADR;;MAEA,OAAA,kEAA+C;MAC/C,GAAG,CAAC,QAAJ,CAAa,QAAb,EAAuB,CAAE,OAAF,CAAvB,EAAqC,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAArC;IARF,CAhBA;;AA2BA,WAAO;EA7BN,CAAA,CAAH,CAAA,EArVA;;;;;EAwXA,GAAG,CAAC,QAAJ,CAAa,KAAb,EAAwB;IAAE,OAAA,EAAS;EAAX,CAAxB,EAA+C,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;EAAxC,CAA/C;;EACA,GAAG,CAAC,QAAJ,CAAa,KAAb,EAAwB;IAAE,OAAA,EAAS;EAAX,CAAxB,EAA+C,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;EAAxC,CAA/C;;EACA,GAAG,CAAC,QAAJ,CAAa,SAAb,EAAwB;IAAE,OAAA,EAAS;EAAX,CAAxB,EAA+C,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;EAAxC,CAA/C;;EACA,GAAG,CAAC,QAAJ,CAAa,SAAb,EAAwB;IAAE,OAAA,EAAS;EAAX,CAAxB,EAA+C,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;EAAxC,CAA/C,EA3XA;;;EA6XA,GAAG,CAAC,QAAJ,CAAa,SAAb,EAA8B;IAAE,SAAA,EAAW;EAAb,CAA9B,EAAwD,MAAM,CAAC,SAA/D;;EACA,GAAG,CAAC,QAAJ,CAAa,eAAb,EAA8B;IAAE,SAAA,EAAW;EAAb,CAA9B,EAAwD,MAAM,CAAC,QAA/D;;EACA,GAAG,CAAC,QAAJ,CAAa,UAAb,EAA8B;IAAE,SAAA,EAAW;EAAb,CAA9B,EAAwD,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,IAAC,CAAA,MAAD,CAAQ,CAAR,CAAF,CAAA,IAAkB,CAAE,CAAA,GAAK,CAAP;EAA3B,CAAxD;;EACA,GAAG,CAAC,QAAJ,CAAa,UAAb,EAA8B;IAAE,SAAA,EAAW;EAAb,CAA9B,EAAwD,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,IAAC,CAAA,MAAD,CAAQ,CAAR,CAAF,CAAA,IAAkB,CAAE,CAAA,GAAK,CAAP;EAA3B,CAAxD;;EACA,GAAG,CAAC,QAAJ,CAAa,aAAb,EAA8B;IAAE,SAAA,EAAW;EAAb,CAA9B,EAAwD,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,IAAC,CAAA,MAAD,CAAQ,CAAR,CAAF,CAAA,IAAkB,CAAE,CAAA,IAAK,CAAP;EAA3B,CAAxD;;EACA,GAAG,CAAC,QAAJ,CAAa,aAAb,EAA8B;IAAE,SAAA,EAAW;EAAb,CAA9B,EAAwD,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;WAAY,CAAE,IAAC,CAAA,aAAD,CAAe,CAAf,CAAF,CAAA,IAAyB,QAAE,GAAK,EAAP,CAAA,KAAc;EAAnD,CAAxD,EAlYA;;;EAoYA,GAAG,CAAC,QAAJ,CAAa,cAAb,EAA8B;IAAE,SAAA,EAAW;EAAb,CAA9B,EAAyD,MAAM,CAAC,aAAhE;;EACA,GAAG,CAAC,QAAJ,CAAa,OAAb,EAA8B;IAAE,SAAA,EAAW;EAAb,CAA9B,EAAyD,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,IAAC,CAAA,YAAD,CAAc,CAAd,CAAF,CAAA,IAAwB,CAAE,CAAA,IAAK,CAAP;EAAjC,CAAzD;;EACA,GAAG,CAAC,QAAJ,CAAa,MAAb,EAA8B;IAAE,SAAA,EAAW;EAAb,CAA9B,EAAyD,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,IAAC,CAAA,aAAD,CAAe,CAAf,CAAF,CAAA,IAA6B,IAAC,CAAA,WAAD,CAAa,CAAb,EAAgB,CAAhB;EAAtC,CAAzD;;EACA,GAAG,CAAC,QAAJ,CAAa,KAAb,EAA8B;IAAE,SAAA,EAAW;EAAb,CAA9B,EAAyD,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,IAAC,CAAA,aAAD,CAAe,CAAf,CAAF,CAAA,IAAyB,CAAI,IAAC,CAAA,WAAD,CAAa,CAAb,EAAgB,CAAhB;EAAtC,CAAzD,EAvYA;;;;;EA2YA,GAAG,CAAC,QAAJ,CAAa,OAAb,EAA8B,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,IAAC,CAAA,OAAD,CAAS,CAAT,CAAF,CAAA,KAAkB;EAA3B,CAA9B;;EACA,GAAG,CAAC,QAAJ,CAAa,UAAb,EAA8B,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,IAAC,CAAA,OAAD,CAAS,CAAT,CAAF,CAAA,GAAiB;EAA1B,CAA9B,EA5YA;;;EA8YA,GAAG,CAAC,QAAJ,CAAa,eAAb,EAA8B;IAAE,SAAA,EAAW;EAAb,CAA9B,EAA0D,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,IAAC,CAAA,OAAD,CAAS,CAAT,CAAF,CAAA,KAAkB;EAA3B,CAA1D;;EACA,GAAG,CAAC,QAAJ,CAAa,eAAb,EAA8B;IAAE,SAAA,EAAW;EAAb,CAA9B,EAA0D,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,CAAE,IAAC,CAAA,YAAD,CAAc,CAAd,CAAF,CAAA,KAAuB,UAAzB,CAAA,IAA0C,CAAE,CAAI,MAAM,CAAC,cAAP,CAAsB,CAAtB,EAAyB,WAAzB,CAAN;EAAnD,CAA1D;;EACA,GAAG,CAAC,QAAJ,CAAa,UAAb,EAA8B,QAAA,CAAE,CAAF,CAAA;AAAS,QAAA;kBAAE,IAAC,CAAA,OAAD,CAAS,CAAT,EAAF,KAAoB,UAApB,IAAA,GAAA,KAAgC,eAAhC,IAAA,GAAA,KAAiD;EAA1D,CAA9B;AAhZA",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTYPE/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\n{ assign\n  jr }                    = CND\nflatten                   = require 'lodash/flattenDeep'\n#...........................................................................................................\n{ inspect, }              = require 'util'\n_xrpr                     = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\nxrpr                      = ( x ) -> ( _xrpr x )[ .. 500 ]\n#...........................................................................................................\nisa_type                  = Symbol 'isa_type'\n@_validation_count        = 0\n\n#-----------------------------------------------------------------------------------------------------------\nity_by_cnd =\n  ### ??? ###\n  # nullorundefined:      'nullorundefined'\n  # primitive:            'primitive'\n  # symbol:               'symbol'\n### TAINT object/pod distinction? ###\n  # object:               'object'\n  pod:                  'pod'\n  boolean:              'boolean'\n  buffer:               'buffer'\n  function:             'function'\n  generator:            'generator'\n  # async_function:   'asyncfunction'\n  generator_function:   'generatorfunction'\n  infinity:             'infinity'\n  jsarraybuffer:        'arraybuffer'\n  jserror:              'error'\n  jsglobal:             'global'\n  jsnotanumber:         'nan'\n  jsregex:              'regex'\n  jsundefined:          'undefined'\n  list:                 'list'\n  null:                 'null'\n  number:               'number'\n  text:                 'text'\n  # set:                  'set'\n#                 jsarguments:          'jsarguments'\n#                 jsctx:                'jsctx'\n#                 jsdate:               'jsdate'\n#                 jswindow:             'jswindow'\ncnd_by_ity  = {}\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@type_of = ( x ) ->\n  throw new Error \"µ63000 expected 1 argument, got #{arity}\" unless ( arity = arguments.length ) is 1\n  return ity_by_cnd[ type = CND.type_of x ] ? type\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_rprs_of_tprs = ( tprs ) ->\n  ### `tprs: test parameters, i.e. additional arguments to type tester, as in `multiple_of x, 4` ###\n  rpr_of_tprs = switch tprs.length\n    when 0 then ''\n    when 1 then \"#{rpr tprs[ 0 ]}\"\n    else \"#{rpr tprs}\"\n  srpr_of_tprs = switch rpr_of_tprs.length\n    when 0 then ''\n    else ' ' + rpr_of_tprs\n  return { rpr_of_tprs, srpr_of_tprs, }\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT must allow additional arguments (as in, `multiple_of x, 5`) ###\n@validate = ( type, message = null ) ->\n  throw new Error \"µ63077 unknown type #{rpr type}\" unless ( tester = @[ type ] )?\n  return ( x, tprs... ) =>\n    prv_message = ''\n    try\n      result = tester x, tprs...\n    catch error\n      prv_message = error.message + '\\n'\n    # @_stop_validating()\n    unless result\n      ### TAINT code duplication ###\n      { rpr_of_tprs, srpr_of_tprs, } = get_rprs_of_tprs tprs\n      if message?\n        message = message.replace /\\$type/g,      type\n        message = message.replace /\\$value/g,     rpr x\n        message = message.replace /\\$tprs/g,      rpr_of_tprs\n        message = message.replace /\\$stprs/g,     srpr_of_tprs\n      else\n        message = \"µ63154 expected a #{type}, got a #{CND.type_of x}#{srpr_of_tprs} (value: #{xrpr x})\"\n      throw new Error prv_message + message\n    return null\n\n\n#===========================================================================================================\n# ADDING TYPES\n#-----------------------------------------------------------------------------------------------------------\n@add_type = ( type, settings, tester ) ->\n  switch ( arity = arguments.length )\n    when 2 then [ type, settings, tester, ] = [ type, null, settings, ]\n    when 3 then null\n    else throw new Error \"µ29892 expected 2 or 3 arguments, got #{arity}\"\n  defaults  = { overwrite: false, size_of: ( settings?.size_of ? @_registry_for_size_of[ type ] ? null ), }\n  settings  = if settings? then ( assign {}, settings, defaults ) else defaults\n  #.........................................................................................................\n  unless ( _type = CND.isa_text type )\n    throw new Error \"µ33988 expected a text for type, got a #{rpr _type}\"\n  unless ( _type = CND.isa_function tester )\n    throw new Error \"µ33988 expected a function for tester, got a #{rpr _type}\"\n  #.........................................................................................................\n  if ( not settings.overwrite ) and ( @[ type ] isnt undefined )\n    throw new Error \"name #{rpr type} already defined\"\n  #.........................................................................................................\n  tester    = tester.bind @\n  #.........................................................................................................\n  ### Add supertype: ###\n  if ( supertype = settings.supertype )?\n    @add_supertype type, supertype\n  #.........................................................................................................\n  ### Add type tester method: ###\n  @[ type ] = ( x, tprs... ) =>\n    R = tester x, tprs...\n    if ( not R ) and ( @_validation_count > 0 )\n      ### TAINT code duplication ###\n      { rpr_of_tprs, srpr_of_tprs, } = get_rprs_of_tprs tprs\n      throw new Error \"µ11111 not a valid #{type}#{srpr_of_tprs}: #{xrpr x}\"\n    return R\n  @[ type ][ isa_type ] = true\n  #.........................................................................................................\n  ### Add type validator method: ###\n  @validate[ type ] = ( x, P... ) =>\n    @_validation_count += +1\n    try\n      ( @validate type ) x, P...\n    # catch error then debug \"µ23272 >>>>>>>>>>>>>> value #{rpr x}\"; throw error\n    finally\n      @_validation_count += -1\n    return null\n  #.........................................................................................................\n  ### Add type size method: ###\n  do ( s = settings.size_of ) =>\n    if s is null\n      @_registry_for_size_of[ type ] = null\n    else\n      switch type_of_s = @type_of s\n        when 'text'     then @_registry_for_size_of[ type ] = ( x ) -> x[ s ]\n        when 'function' then @_registry_for_size_of[ type ] = s\n        else throw new Error \"µ30988 expected null, a text or a function for size_of, got a #{type_of_s}\"\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n# SUB- AND SUPERTYPES\n#-----------------------------------------------------------------------------------------------------------\n### TAINT consider to use specialized tree structure module ###\n@supertypes =\n  function:           'callable'\n  generatorfunction:  'callable'\n  # boundfunction:      'callable'\n  # asyncfunction:      'callable'\n  # safe_integer:       'integer'\n  # integer:            'number'\n  # float:              'number'\n\n#-----------------------------------------------------------------------------------------------------------\n@add_supertype = ( subtype, supertype ) ->\n  ### TAINT code duplication ###\n  throw new Error \"µ63231 expected 2 arguments, got #{arity}\" unless ( arity = arguments.length  ) is 2\n  throw new Error \"µ63308 expected a text, got a #{type}\"     unless ( type = @type_of subtype   ) is 'text'\n  throw new Error \"µ63385 expected a text, got a #{type}\"     unless ( type = @type_of supertype ) is 'text'\n  if ( @supertypes[ subtype ] )?\n    throw new Error \"µ33981 subtype #{rpr subtype} already has a supertype (#{rpr supertype})\"\n  @supertypes[ subtype ] = supertype\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@extends = ( subtype, supertype ) ->\n  ### TAINT code duplication ###\n  throw new Error \"µ63231 expected 2 arguments, got #{arity}\" unless ( arity = arguments.length  ) is 2\n  throw new Error \"µ63308 expected a text, got a #{type}\"     unless ( type = @type_of subtype   ) is 'text'\n  throw new Error \"µ63385 expected a text, got a #{type}\"     unless ( type = @type_of supertype ) is 'text'\n  return @_extends subtype, supertype, [ subtype, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_extends = ( subtype, supertype, trail ) ->\n  return true if subtype is supertype\n  return false unless ( subsupertype = @supertypes[ subtype ] )?\n  if subsupertype in trail\n    throw new Error \"µ44857 detected loop in supertypes: #{rpr trail}\"\n  trail.push subsupertype\n  return true if subsupertype is supertype\n  return @_extends subsupertype, supertype, trail\n  # return ( @supertypes[ subtype ] is supertype ) or ( @_extends @supertypes[ subtype ], supertype )\n\n#-----------------------------------------------------------------------------------------------------------\n@supertype_of = ( x ) -> @supertype_of_type @type_of x\n\n#-----------------------------------------------------------------------------------------------------------\n@supertype_of_type = ( type ) ->\n  return type unless ( supertype = @supertypes[ type ] )?\n  return @supertype_of_type supertype\n\n\n#===========================================================================================================\n# OBJECT SIZES\n#-----------------------------------------------------------------------------------------------------------\n### TAINT in lieu of `@_registry_for_size_of`, set up a type metadata registry that includes other info\nsuch as sub/supertypes, whether type represents an indexed and ordered collection, etc. ###\n@_registry_for_size_of =\n  list:       'length'\n  # arguments:  'length'\n  buffer:     'length'\n  set:        'size'\n  map:        'size'\n  #.........................................................................................................\n  global:     ( x ) => ( @all_keys_of x ).length\n  pod:        ( x ) => ( @keys_of     x ).length\n  #.........................................................................................................\n  text:       ( x, selector = 'codeunits' ) ->\n    switch selector\n      when 'codepoints' then return ( Array.from x ).length\n      when 'codeunits'  then return x.length\n      when 'bytes'      then return Buffer.byteLength x, ( settings?[ 'encoding' ] ? 'utf-8' )\n      else throw new Error \"unknown counting selector #{rpr selector}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@size_of = ( x, P... ) ->\n  ### The `size_of()` method uses a per-type configurable methodology to return the size of a given value;\n  such methodology may permit or necessitate passing additional arguments (such as `size_of text`, which\n  comes in several flavors depending on whether bytes or codepoints are to be counted). As such, it is a\n  model for how to implement Go-like method dispatching. ###\n  # debug 'µ44744', [ x, P, ]\n  type = CND.type_of x\n  unless ( @function ( getter = @_registry_for_size_of[ type ] ) )\n    throw new Error \"µ88793 unable to get size of a #{type}\"\n  return getter x, P...\n\n#-----------------------------------------------------------------------------------------------------------\n@first_of   = ( collection ) -> collection[ 0 ]\n@last_of    = ( collection ) -> collection[ collection.length - 1 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@arity_of = ( x ) ->\n  unless ( type = @supertype_of x ) is 'callable'\n    throw new Error \"µ88733 expected a callable, got a #{type}\"\n  return x.length\n\n\n#===========================================================================================================\n# OBJECT PROPERTY CATALOGUING\n#-----------------------------------------------------------------------------------------------------------\n@keys_of              = ( P... ) -> @values_of @walk_keys_of      P...\n@all_keys_of          = ( P... ) -> @values_of @walk_all_keys_of  P...\n@all_own_keys_of      = ( x    ) -> if x? then Object.getOwnPropertyNames x else []\n@walk_all_own_keys_of = ( x    ) -> yield k for k in @all_own_keys_of x\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_keys_of = ( x, settings ) ->\n  defaults = { skip_undefined: true, }\n  settings = if settings? then ( assign {}, settings, defaults ) else defaults\n  for k of x\n    ### TAINT should use property descriptors to avoid possible side effects ###\n    continue if ( x[ k ] is undefined ) and settings.skip_undefined\n    yield k\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_all_keys_of = ( x, settings ) ->\n  defaults = { skip_object: true, skip_undefined: true, }\n  settings = if settings? then ( assign {}, settings, defaults ) else defaults\n  return @_walk_all_keys_of x, new Set(), settings\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_all_keys_of = ( x, seen, settings ) ->\n  if ( not settings.skip_object ) and x is Object::\n    yield return\n  #.........................................................................................................\n  for k from @walk_all_own_keys_of x\n    continue if seen.has k\n    seen.add k\n    ### TAINT should use property descriptors to avoid possible side effects ###\n    ### TAINT trying to access `arguments` causes error ###\n    try value = x[ k ] catch error then continue\n    continue if ( value is undefined ) and settings.skip_undefined\n    if settings.symbol?\n      continue unless value?\n      continue unless value[ settings.symbol ]\n    yield k\n  #.........................................................................................................\n  if ( proto = Object.getPrototypeOf x )?\n    yield from @_walk_all_keys_of proto, seen, settings\n\n#-----------------------------------------------------------------------------------------------------------\n### Turn iterators into lists, copy lists: ###\n@values_of = ( x ) -> [ x... ]\n\n#-----------------------------------------------------------------------------------------------------------\n@has_keys = ( x, P... ) ->\n  ### Observe that `has_keys()` always considers `undefined` as 'not set' ###\n  return false unless x? ### TAINT or throw error ###\n  for key in flatten P\n    ### TAINT should use property descriptors to avoid possible side effects ###\n    return false if x[ key ] is undefined\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\n@has_only_keys = ( x, P... ) ->\n  probes  = ( flatten P ).sort()\n  keys    = ( @values_of @keys_of x ).sort()\n  return CND.equals probes, keys\n\n#-----------------------------------------------------------------------------------------------------------\n@known_types = -> [ ( @walk_all_keys_of @, { symbol: isa_type } )... ]\n\n\n#===========================================================================================================\n# THE `ISA()` METHOD\n#-----------------------------------------------------------------------------------------------------------\nisa = ( x, type ) ->\n  return @type_of x if ( arity = arguments.length ) is 1\n  throw new Error \"µ63462 expected 2 arguments, got #{arity}\" unless arity is 2\n  throw new Error \"µ63539 expected a text, got a #{type}\"     unless ( type = @type_of type ) is 'text'\n  throw new Error \"µ63616 unknown type #{rpr type}\"           unless ( tester = @[ type ] )?\n  return tester x\n\n\n############################################################################################################\n# ASSEMBLY\n#===========================================================================================================\nisa             = isa.bind @\nmodule.exports  = isa\n\ndo =>\n  #---------------------------------------------------------------------------------------------------------\n  for cnd_type, ity_type of ity_by_cnd\n    ### Generate entries to cnd_by_ity: ###\n    if cnd_by_ity[ ity_type ]?\n      throw new Error \"µ49833 name collision in cnd_by_ity: #{rpr ity_type}\"\n    cnd_by_ity[ ity_type ] = cnd_type\n\n  #---------------------------------------------------------------------------------------------------------\n  ### Bind all functions to `module.exports`: ###\n  for key, value of @\n    ### TAINT use isa.callable ###\n    if CND.isa_function value\n      isa[ key ] = value.bind isa\n    else\n      isa[ key ] = value\n\n  #---------------------------------------------------------------------------------------------------------\n  for cnd_type, ity_type of ity_by_cnd\n    ### Generate mappings from `isa.$type()` to CND.isa_$type()`: ###\n    continue if @[ ity_type ]?\n    cnd_key = \"isa_#{cnd_type}\"\n    # debug 'µ8498', cnd_type, ity_type, cnd_key, CND.type_of CND[ cnd_key ]\n    unless ( type = CND.type_of ( cnd_method = CND[ cnd_key ] ) ) is 'function'\n      throw new Error \"µ63693 expected a function for `CND.#{cnd_key}`, found a #{type}\"\n    size_of = @_registry_for_size_of[ ity_type ] ? null\n    isa.add_type ity_type, { size_of, }, cnd_method.bind CND\n\n  #---------------------------------------------------------------------------------------------------------\n  return null\n\n\n#===========================================================================================================\n# ADDITIONAL TYPES\n#-----------------------------------------------------------------------------------------------------------\nisa.add_type 'set',     { size_of: 'size',  }, ( x ) -> ( Object::toString.call x ) is '[object Set]'\nisa.add_type 'map',     { size_of: 'size',  }, ( x ) -> ( Object::toString.call x ) is '[object Map]'\nisa.add_type 'weakmap', { size_of: null,    }, ( x ) -> ( Object::toString.call x ) is '[object WeakMap]'\nisa.add_type 'weakset', { size_of: null,    }, ( x ) -> ( Object::toString.call x ) is '[object WeakSet]'\n#-----------------------------------------------------------------------------------------------------------\nisa.add_type 'integer',       { supertype: 'number', }, Number.isInteger\nisa.add_type 'finite_number', { supertype: 'number', }, Number.isFinite\nisa.add_type 'positive',      { supertype: 'number', }, ( x ) -> ( @number x ) and ( x >  0 )\nisa.add_type 'negative',      { supertype: 'number', }, ( x ) -> ( @number x ) and ( x <  0 )\nisa.add_type 'nonnegative',   { supertype: 'number', }, ( x ) -> ( @number x ) and ( x >= 0 )\nisa.add_type 'multiple_of',   { supertype: 'number', }, ( x, d ) -> ( @finite_number x ) and ( x %% d ) is 0\n#-----------------------------------------------------------------------------------------------------------\nisa.add_type 'safe_integer',  { supertype: 'integer', }, Number.isSafeInteger\nisa.add_type 'count',         { supertype: 'integer', }, ( x ) -> ( @safe_integer x ) and ( x >= 0 )\nisa.add_type 'even',          { supertype: 'integer', }, ( x ) -> ( @finite_number x ) and     @multiple_of x, 2\nisa.add_type 'odd',           { supertype: 'integer', }, ( x ) -> ( @finite_number x ) and not @multiple_of x, 2\n# isa.add_type 'positive0',     ( x ) -> ( @number x ) and ( x >= 0 )\n# isa.add_type 'negative0',     ( x ) -> ( @number x ) and ( x <= 0 )\n#-----------------------------------------------------------------------------------------------------------\nisa.add_type 'empty',         ( x ) -> ( @size_of x ) is 0\nisa.add_type 'nonempty',      ( x ) -> ( @size_of x ) > 0\n#-----------------------------------------------------------------------------------------------------------\nisa.add_type 'asyncfunction', { supertype: 'callable', }, ( x ) -> ( @type_of x ) is 'asyncfunction'\nisa.add_type 'boundfunction', { supertype: 'callable', }, ( x ) -> ( ( @supertype_of x ) is 'callable' ) and ( not Object.hasOwnProperty x, 'prototype' )\nisa.add_type 'callable',      ( x ) -> ( @type_of x ) in [ 'function', 'asyncfunction', 'generatorfunction', ]\n\n\n\n\n\n\n\n\n"
  ]
}