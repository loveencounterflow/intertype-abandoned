{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTYPE/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\n{ assign\n  jr }                    = CND\n\n#-----------------------------------------------------------------------------------------------------------\nity_by_cnd =\n  ### ??? ###\n  # nullorundefined:      'nullorundefined'\n  # primitive:            'primitive'\n  # symbol:               'symbol'\n### TAINT object/pod distinction? ###\n  # object:               'object'\n  pod:                  'pod'\n  boolean:              'boolean'\n  buffer:               'buffer'\n  function:             'function'\n  generator:            'generator'\n  generator_function:   'generatorfunction'\n  infinity:             'infinity'\n  jsarraybuffer:        'arraybuffer'\n  jserror:              'error'\n  jsglobal:             'global'\n  jsnotanumber:         'nan'\n  jsregex:              'regex'\n  jsundefined:          'undefined'\n  list:                 'list'\n  null:                 'null'\n  number:               'number'\n  text:                 'text'\n#                 jsarguments:          'jsarguments'\n#                 jsctx:                'jsctx'\n#                 jsdate:               'jsdate'\n#                 jswindow:             'jswindow'\ncnd_by_ity  = {}\n\n#-----------------------------------------------------------------------------------------------------------\n# @boolean              = CND.isa_boolean\n# @buffer               = CND.isa_buffer\n# @function             = CND.isa_function\n# @generator            = CND.isa_generator\n# @generatorfunction    = CND.isa_generator_function\n# @infinity             = CND.isa_infinity\n# # @jsarguments          = CND.isa_jsarguments\n# @arraybuffer        = CND.isa_jsarraybuffer\n# @nodejs_buffer             = CND.isa_jsbuffer\n# # @jsctx                = CND.isa_jsctx\n# # @jsdate               = CND.isa_jsdate\n# @error              = CND.isa_jserror\n# @global             = CND.isa_jsglobal\n# @nan         = CND.isa_jsnotanumber\n# @regex              = CND.isa_jsregex\n# @undefined          = CND.isa_jsundefined\n# # @jswindow             = CND.isa_jswindow\n# @list                 = CND.isa_list\n# @null                 = CND.isa_null\n# @nullorundefined      = CND.isa_nullorundefined\n# @number               = CND.isa_number\n# ### TAINT object/pod distinction? ###\n# @object               = CND.isa_object\n# @pod                  = CND.isa_pod\n# @primitive            = CND.isa_primitive\n# @symbol               = CND.isa_symbol\n# @text                 = CND.isa_text\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@type_of = ( x ) ->\n  throw new Error \"µ63000 expected 1 argument, got #{arity}\" unless ( arity = arguments.length ) is 1\n  return ity_by_cnd[ type = CND.type_of x ] ? type\n\n#-----------------------------------------------------------------------------------------------------------\n@validate = ( x, type, message = null ) ->\n  throw new Error \"µ63077 unknown type #{rpr type}\" unless ( tester = @[ type ] )?\n  unless tester x\n    throw new Error message ? \"µ63154 expected a #{type}, got a #{CND.type_of x}\"\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n# function_types    = new Set [ 'generatorfunction', 'generator', 'asyncfunction', ]\n# @function         = ( x ) -> function_types.has ( @isa x )\n# @proper_function  = ( x ) -> @isa x )\n#-----------------------------------------------------------------------------------------------------------\nsynonyms =\n  string: 'text'\n\n#-----------------------------------------------------------------------------------------------------------\n@extensions =\n  boundfunction:      'function'\n  generator:          'function'\n  generatorfunction:  'function'\n  asyncfunction:      'function'\n\n#-----------------------------------------------------------------------------------------------------------\n@extends = ( subtype, supertype ) ->\n  ### TAINT use validation functions with arguments ###\n  throw new Error \"µ63231 expected 2 arguments, got #{arity}\" unless arity is 2\n  throw new Error \"µ63308 expected a text, got a #{type}\"     unless ( type = @type_of subtype   ) is 'text'\n  throw new Error \"µ63385 expected a text, got a #{type}\"     unless ( type = @type_of supertype ) is 'text'\n  return true if subtype is supertype\n  return @[ subtype ] is supertype\n\n\n#===========================================================================================================\n# LISTS\n#-----------------------------------------------------------------------------------------------------------\n@first_of   = ( collection ) -> collection[ 0 ]\n@last_of    = ( collection ) -> collection[ collection.length - 1 ]\n\n#===========================================================================================================\n# OBJECT SIZES\n#-----------------------------------------------------------------------------------------------------------\n@size_of = ( x, settings ) ->\n  switch type = CND.type_of x\n    when 'list', 'arguments', 'buffer' then return x.length\n    when 'text'\n      switch selector = settings?[ 'count' ] ? 'codeunits'\n        when 'codepoints' then return ( Array.from x ).length\n        when 'codeunits'  then return x.length\n        when 'bytes'      then return Buffer.byteLength x, ( settings?[ 'encoding' ] ? 'utf-8' )\n        else throw new Error \"unknown counting selector #{rpr selector}\"\n    when 'set', 'map'     then return x.size\n  if CND.isa_pod x then return ( Object.keys x ).length\n  throw new Error \"unable to get size of a #{type}\"\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@all_own_keys_of = ( x ) ->\n  unless x?\n    yield return\n  yield k for k in Object.getOwnPropertyNames x\n\n#-----------------------------------------------------------------------------------------------------------\n@all_keys_of = ( x, include_object = false ) -> @_all_keys_of x, new Set(), include_object\n\n#-----------------------------------------------------------------------------------------------------------\n@_all_keys_of = ( x, seen, include_object = false ) ->\n  if ( not include_object ) and x is Object::\n    yield return\n  # debug 'µ23773', ( rpr x ), ( x:: )\n  for k from @all_own_keys_of x\n    continue if seen.has k\n    seen.add k\n    yield k\n  if ( proto = Object.getPrototypeOf x )?\n    yield from @_all_keys_of proto, seen, include_object\n\n#-----------------------------------------------------------------------------------------------------------\n@keys_of    = ( x ) -> yield k for k of x\n@values_of  = ( x ) -> [ x... ]\n\n#-----------------------------------------------------------------------------------------------------------\nisa = ( x, type ) ->\n  return @type_of x if ( arity = arguments.length ) is 1\n  throw new Error \"µ63462 expected 2 arguments, got #{arity}\" unless arity is 2\n  throw new Error \"µ63539 expected a text, got a #{type}\"     unless ( type = @type_of type ) is 'text'\n  throw new Error \"µ63616 unknown type #{rpr type}\"           unless ( tester = @[ type ] )?\n  return tester x\n#-----------------------------------------------------------------------------------------------------------\n# debug 'µ38873', @\n# debug 'µ38873', @isa\n# return @\n\n############################################################################################################\n\nself            = @\nisa             = isa.bind @\nmodule.exports  = isa\n\ndo ->\n  #---------------------------------------------------------------------------------------------------------\n  for cnd_type, ity_type of ity_by_cnd\n    #.......................................................................................................\n    ### Generate entries to cnd_by_ity: ###\n    ### TAINT should check for name clashes ###\n    cnd_by_ity[ ity_type ] = cnd_type\n    #.......................................................................................................\n    ### Generate mappings from `isa.$type()` to CND.isa_$type()`: ###\n    cnd_key = \"isa_#{cnd_type}\"\n    # debug 'µ8498', cnd_type, ity_type, cnd_key, CND.type_of CND[ cnd_key ]\n    unless ( type = CND.type_of ( cnd_method = CND[ cnd_key ] ) ) is 'function'\n      throw new Error \"µ63693 expected a function for `CND.#{cnd_key}`, found a #{type}\"\n    self[ ity_type ] = cnd_method.bind CND\n\n  #---------------------------------------------------------------------------------------------------------\n  ### Bind all functions to `module.exports`: ###\n  for key, value of self\n    ### TAINT use isa_callable ###\n    if CND.isa_function value\n      isa[ key ] = value.bind isa\n    else\n      isa[ key ] = value\n\n  #---------------------------------------------------------------------------------------------------------\n  return null\n\n\n\n\n\n\n\n\n"
  ]
}