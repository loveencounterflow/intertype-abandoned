{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTYPE/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\n{ assign\n  jr }                    = CND\nflatten                   = require 'lodash/flattenDeep'\n\n#-----------------------------------------------------------------------------------------------------------\nity_by_cnd =\n  ### ??? ###\n  # nullorundefined:      'nullorundefined'\n  # primitive:            'primitive'\n  # symbol:               'symbol'\n### TAINT object/pod distinction? ###\n  # object:               'object'\n  pod:                  'pod'\n  boolean:              'boolean'\n  buffer:               'buffer'\n  function:             'function'\n  generator:            'generator'\n  # async_function:   'asyncfunction'\n  generator_function:   'generatorfunction'\n  infinity:             'infinity'\n  jsarraybuffer:        'arraybuffer'\n  jserror:              'error'\n  jsglobal:             'global'\n  jsnotanumber:         'nan'\n  jsregex:              'regex'\n  jsundefined:          'undefined'\n  list:                 'list'\n  null:                 'null'\n  number:               'number'\n  text:                 'text'\n#                 jsarguments:          'jsarguments'\n#                 jsctx:                'jsctx'\n#                 jsdate:               'jsdate'\n#                 jswindow:             'jswindow'\ncnd_by_ity  = {}\n\n#-----------------------------------------------------------------------------------------------------------\n@integer          = Number.isInteger\n@finite_number    = Number.isFinite\n@safe_integer     = Number.isSafeInteger\n@count            = ( x ) -> ( @safe_integer x ) and ( x >= 0 )\n@asyncfunction    = ( x ) -> ( @type_of x ) is 'asyncfunction'\n@boundfunction    = ( x ) -> ( ( @supertype_of x ) is 'callable' ) and ( not Object.hasOwnProperty x, 'prototype' )\n@callable         = ( x ) -> ( @type_of x ) in [ 'function', 'asyncfunction', 'generatorfunction', ]\n@positive         = ( x ) -> ( @number x ) and ( x >  0 )\n@nonnegative      = ( x ) -> ( @number x ) and ( x >= 0 )\n@negative         = ( x ) -> ( @number x ) and ( x <  0 )\n@even             = ( x ) -> ( @finite_number x ) and     @multiple_of x, 2\n@odd              = ( x ) -> ( @finite_number x ) and not @multiple_of x, 2\n@multiple_of      = ( x, d ) -> ( @finite_number x ) and ( x %% d ) is 0\n\n#-----------------------------------------------------------------------------------------------------------\n@arity = ( x ) ->\n  unless ( type = @supertype_of x ) is 'callable'\n    throw new Error \"µ88733 expected a callable, got a #{type}\"\n  return x.length\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@type_of = ( x ) ->\n  throw new Error \"µ63000 expected 1 argument, got #{arity}\" unless ( arity = arguments.length ) is 1\n  return ity_by_cnd[ type = CND.type_of x ] ? type\n\n#-----------------------------------------------------------------------------------------------------------\n@validate = ( x, type, message = null ) ->\n  throw new Error \"µ63077 unknown type #{rpr type}\" unless ( tester = @[ type ] )?\n  unless tester x\n    throw new Error message ? \"µ63154 expected a #{type}, got a #{CND.type_of x}\"\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n# synonyms =\n#   string: 'text'\n\n#-----------------------------------------------------------------------------------------------------------\n@extensions =\n  function:           'callable'\n  boundfunction:      'callable'\n  generatorfunction:  'callable'\n  asyncfunction:      'callable'\n  safe_integer:       'integer'\n  integer:            'number'\n  float:              'number'\n\n#-----------------------------------------------------------------------------------------------------------\n@extends = ( subtype, supertype ) ->\n  ### TAINT use validation functions with arguments ###\n  throw new Error \"µ63231 expected 2 arguments, got #{arity}\" unless ( arity = arguments.length  ) is 2\n  throw new Error \"µ63308 expected a text, got a #{type}\"     unless ( type = @type_of subtype   ) is 'text'\n  throw new Error \"µ63385 expected a text, got a #{type}\"     unless ( type = @type_of supertype ) is 'text'\n  return true if subtype is supertype\n  return ( @extensions[ subtype ] is supertype ) or ( @extends @extensions[ subtype ], supertype )\n\n#-----------------------------------------------------------------------------------------------------------\n@supertype_of = ( x ) -> @supertype_of_type @type_of x\n\n#-----------------------------------------------------------------------------------------------------------\n@supertype_of_type = ( type ) ->\n  return type unless ( supertype = @extensions[ type ] )?\n  return @supertype_of_type supertype\n\n#===========================================================================================================\n# LISTS\n#-----------------------------------------------------------------------------------------------------------\n@first_of   = ( collection ) -> collection[ 0 ]\n@last_of    = ( collection ) -> collection[ collection.length - 1 ]\n\n#===========================================================================================================\n# OBJECT SIZES\n#-----------------------------------------------------------------------------------------------------------\n@size_of = ( x, settings ) ->\n  switch type = CND.type_of x\n    when 'list', 'arguments', 'buffer' then return x.length\n    when 'text'\n      switch selector = settings?[ 'count' ] ? 'codeunits'\n        when 'codepoints' then return ( Array.from x ).length\n        when 'codeunits'  then return x.length\n        when 'bytes'      then return Buffer.byteLength x, ( settings?[ 'encoding' ] ? 'utf-8' )\n        else throw new Error \"unknown counting selector #{rpr selector}\"\n    when 'set', 'map'     then return x.size\n  if CND.isa_pod x then return ( Object.keys x ).length\n  throw new Error \"unable to get size of a #{type}\"\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@all_own_keys_of = ( x ) ->\n  unless x?\n    yield return\n  yield k for k in Object.getOwnPropertyNames x\n\n#-----------------------------------------------------------------------------------------------------------\n@all_keys_of = ( x, include_object = false ) ->\n  defaults = { include_object: false, include_undefined: false, }\n  settings = assign {}, settings, defaults\n  return @_all_keys_of x, new Set(), settings\n\n#-----------------------------------------------------------------------------------------------------------\n@_all_keys_of = ( x, seen, settings ) ->\n  if ( not settings.include_object ) and x is Object::\n    yield return\n  # debug 'µ23773', ( rpr x ), ( x:: )\n  for k from @all_own_keys_of x\n    continue if seen.has k\n    seen.add k\n    ### TAINT should use property descriptors to avoid possible side effects ###\n    if x[ k ] isnt undefined\n      yield k\n  if ( proto = Object.getPrototypeOf x )?\n    yield from @_all_keys_of proto, seen, settings\n\n#-----------------------------------------------------------------------------------------------------------\n@keys_of    = ( x ) -> yield k for k of x\n@values_of  = ( x ) -> [ x... ]\n\n#-----------------------------------------------------------------------------------------------------------\n@has_keys = ( x, P... ) ->\n  ### Observe that\n  return false unless x? ### TAINT or throw error ###\n  for key in flatten P\n    return false if x[ key ] is undefined\n  return true\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nisa = ( x, type ) ->\n  return @type_of x if ( arity = arguments.length ) is 1\n  throw new Error \"µ63462 expected 2 arguments, got #{arity}\" unless arity is 2\n  throw new Error \"µ63539 expected a text, got a #{type}\"     unless ( type = @type_of type ) is 'text'\n  throw new Error \"µ63616 unknown type #{rpr type}\"           unless ( tester = @[ type ] )?\n  return tester x\n\n\n############################################################################################################\n\nself            = @\nisa             = isa.bind @\nmodule.exports  = isa\n\ndo ->\n  #---------------------------------------------------------------------------------------------------------\n  for cnd_type, ity_type of ity_by_cnd\n    #.......................................................................................................\n    ### Generate entries to cnd_by_ity: ###\n    if cnd_by_ity[ ity_type ]?\n      throw new Error \"µ49833 name collision in cnd_by_ity: #{rpr ity_type}\"\n    cnd_by_ity[ ity_type ] = cnd_type\n    #.......................................................................................................\n    ### Generate mappings from `isa.$type()` to CND.isa_$type()`: ###\n    cnd_key = \"isa_#{cnd_type}\"\n    # debug 'µ8498', cnd_type, ity_type, cnd_key, CND.type_of CND[ cnd_key ]\n    unless ( type = CND.type_of ( cnd_method = CND[ cnd_key ] ) ) is 'function'\n      throw new Error \"µ63693 expected a function for `CND.#{cnd_key}`, found a #{type}\"\n    self[ ity_type ] ?= cnd_method.bind CND ### avoid to overwrite existing methods ###\n\n  #---------------------------------------------------------------------------------------------------------\n  ### Bind all functions to `module.exports`: ###\n  for key, value of self\n    ### TAINT use isa.callable ###\n    if CND.isa_function value\n      isa[ key ] = value.bind isa\n    else\n      isa[ key ] = value\n\n  #---------------------------------------------------------------------------------------------------------\n  return null\n\n\n\n\n\n\n\n\n"
  ]
}