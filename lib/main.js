// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, alert, assign, badge, cnd_by_ity, debug, flatten, help, info, isa, ity_by_cnd, jr, rpr, self, urge, warn, whisper,
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'INTERTYPE/MAIN';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  ({assign, jr} = CND);

  flatten = require('lodash/flattenDeep');

  //-----------------------------------------------------------------------------------------------------------
  ity_by_cnd = {
    /* ??? */
    // nullorundefined:      'nullorundefined'
    // primitive:            'primitive'
    // symbol:               'symbol'
    /* TAINT object/pod distinction? */
    // object:               'object'
    pod: 'pod',
    boolean: 'boolean',
    buffer: 'buffer',
    function: 'function',
    generator: 'generator',
    // async_function:   'asyncfunction'
    generator_function: 'generatorfunction',
    infinity: 'infinity',
    jsarraybuffer: 'arraybuffer',
    jserror: 'error',
    jsglobal: 'global',
    jsnotanumber: 'nan',
    jsregex: 'regex',
    jsundefined: 'undefined',
    list: 'list',
    null: 'null',
    number: 'number',
    text: 'text'
  };

  //                 jsarguments:          'jsarguments'
  //                 jsctx:                'jsctx'
  //                 jsdate:               'jsdate'
  //                 jswindow:             'jswindow'
  cnd_by_ity = {};

  //-----------------------------------------------------------------------------------------------------------
  this.integer = Number.isInteger;

  this.finite_number = Number.isFinite;

  this.safe_integer = Number.isSafeInteger;

  this.count = function(x) {
    return (this.safe_integer(x)) && (x >= 0);
  };

  this.asyncfunction = function(x) {
    return (this.type_of(x)) === 'asyncfunction';
  };

  this.boundfunction = function(x) {
    return ((this.supertype_of(x)) === 'callable') && (!Object.hasOwnProperty(x, 'prototype'));
  };

  this.callable = function(x) {
    var ref;
    return (ref = this.type_of(x)) === 'function' || ref === 'asyncfunction' || ref === 'generatorfunction';
  };

  this.positive = function(x) {
    return (this.number(x)) && (x > 0);
  };

  this.nonnegative = function(x) {
    return (this.number(x)) && (x >= 0);
  };

  this.negative = function(x) {
    return (this.number(x)) && (x < 0);
  };

  this.even = function(x) {
    return (this.finite_number(x)) && this.multiple_of(x, 2);
  };

  this.odd = function(x) {
    return (this.finite_number(x)) && !this.multiple_of(x, 2);
  };

  this.multiple_of = function(x, d) {
    return (this.finite_number(x)) && (modulo(x, d)) === 0;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.arity = function(x) {
    var type;
    if ((type = this.supertype_of(x)) !== 'callable') {
      throw new Error(`µ88733 expected a callable, got a ${type}`);
    }
    return x.length;
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.type_of = function(x) {
    var arity, ref, type;
    if ((arity = arguments.length) !== 1) {
      throw new Error(`µ63000 expected 1 argument, got ${arity}`);
    }
    return (ref = ity_by_cnd[type = CND.type_of(x)]) != null ? ref : type;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.validate = function(x, type, message = null) {
    var tester;
    if ((tester = this[type]) == null) {
      throw new Error(`µ63077 unknown type ${rpr(type)}`);
    }
    if (!tester(x)) {
      throw new Error(message != null ? message : `µ63154 expected a ${type}, got a ${CND.type_of(x)}`);
    }
    return null;
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  // synonyms =
  //   string: 'text'

  //-----------------------------------------------------------------------------------------------------------
  this.extensions = {
    function: 'callable',
    boundfunction: 'callable',
    generatorfunction: 'callable',
    asyncfunction: 'callable',
    safe_integer: 'integer',
    integer: 'number',
    float: 'number'
  };

  //-----------------------------------------------------------------------------------------------------------
  this.extends = function(subtype, supertype) {
    var arity, type;
    if ((arity = arguments.length) !== 2) {
      /* TAINT use validation functions with arguments */
      throw new Error(`µ63231 expected 2 arguments, got ${arity}`);
    }
    if ((type = this.type_of(subtype)) !== 'text') {
      throw new Error(`µ63308 expected a text, got a ${type}`);
    }
    if ((type = this.type_of(supertype)) !== 'text') {
      throw new Error(`µ63385 expected a text, got a ${type}`);
    }
    if (subtype === supertype) {
      return true;
    }
    return (this.extensions[subtype] === supertype) || (this.extends(this.extensions[subtype], supertype));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.supertype_of = function(x) {
    return this.supertype_of_type(this.type_of(x));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.supertype_of_type = function(type) {
    var supertype;
    if ((supertype = this.extensions[type]) == null) {
      return type;
    }
    return this.supertype_of_type(supertype);
  };

  //===========================================================================================================
  // LISTS
  //-----------------------------------------------------------------------------------------------------------
  this.first_of = function(collection) {
    return collection[0];
  };

  this.last_of = function(collection) {
    return collection[collection.length - 1];
  };

  //===========================================================================================================
  // OBJECT SIZES
  //-----------------------------------------------------------------------------------------------------------
  this.size_of = function(x, settings) {
    var ref, ref1, selector, type;
    switch (type = CND.type_of(x)) {
      case 'list':
      case 'arguments':
      case 'buffer':
        return x.length;
      case 'text':
        switch (selector = (ref = settings != null ? settings['count'] : void 0) != null ? ref : 'codeunits') {
          case 'codepoints':
            return (Array.from(x)).length;
          case 'codeunits':
            return x.length;
          case 'bytes':
            return Buffer.byteLength(x, (ref1 = settings != null ? settings['encoding'] : void 0) != null ? ref1 : 'utf-8');
          default:
            throw new Error(`unknown counting selector ${rpr(selector)}`);
        }
        break;
      case 'set':
      case 'map':
        return x.size;
    }
    if (CND.isa_pod(x)) {
      return (Object.keys(x)).length;
    }
    throw new Error(`unable to get size of a ${type}`);
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.all_own_keys_of = function*(x) {
    var i, k, len, ref, results;
    if (x == null) {
      return;
    }
    ref = Object.getOwnPropertyNames(x);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      results.push((yield k));
    }
    return results;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.all_keys_of = function(x, include_object = false) {
    var defaults, settings;
    defaults = {
      include_object: false,
      include_undefined: false
    };
    settings = assign({}, settings, defaults);
    return this._all_keys_of(x, new Set(), settings);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._all_keys_of = function*(x, seen, settings) {
    var k, proto, ref;
    if ((!settings.include_object) && x === Object.prototype) {
      return;
    }
    ref = this.all_own_keys_of(x);
    // debug 'µ23773', ( rpr x ), ( x:: )
    for (k of ref) {
      if (seen.has(k)) {
        continue;
      }
      seen.add(k);
      /* TAINT should use property descriptors to avoid possible side effects */
      if (x[k] !== void 0) {
        yield k;
      }
    }
    if ((proto = Object.getPrototypeOf(x)) != null) {
      return (yield* this._all_keys_of(proto, seen, settings));
    }
  };

  //-----------------------------------------------------------------------------------------------------------
  this.keys_of = function*(x) {
    var k, results;
    results = [];
    for (k in x) {
      results.push((yield k));
    }
    return results;
  };

  this.values_of = function(x) {
    return [...x];
  };

  //-----------------------------------------------------------------------------------------------------------
  this.has_keys = function(x, ...P) {
    /* Observe that
    return false unless x? */
    return TAINT || (function() {
      throw error/* //########################################################################################################
  for key in flatten P
    return false if x[ key ] is undefined
  return true


#===========================================================================================================
 *
#-----------------------------------------------------------------------------------------------------------
isa = ( x, type ) ->
  return @type_of x if ( arity = arguments.length ) is 1
  throw new Error "µ63462 expected 2 arguments, got #{arity}" unless arity is 2
  throw new Error "µ63539 expected a text, got a #{type}"     unless ( type = @type_of type ) is 'text'
  throw new Error "µ63616 unknown type #{rpr type}"           unless ( tester = @[ type ] )?
  return tester x


 */;
    })();
  };

  self = this;

  isa = isa.bind(this);

  module.exports = isa;

  (function() {
    var cnd_key, cnd_method, cnd_type, ity_type, key, type, value;
//---------------------------------------------------------------------------------------------------------
    for (cnd_type in ity_by_cnd) {
      ity_type = ity_by_cnd[cnd_type];
      //.......................................................................................................
      /* Generate entries to cnd_by_ity: */
      if (cnd_by_ity[ity_type] != null) {
        throw new Error(`µ49833 name collision in cnd_by_ity: ${rpr(ity_type)}`);
      }
      cnd_by_ity[ity_type] = cnd_type;
      //.......................................................................................................
      /* Generate mappings from `isa.$type()` to CND.isa_$type()`: */
      cnd_key = `isa_${cnd_type}`;
      // debug 'µ8498', cnd_type, ity_type, cnd_key, CND.type_of CND[ cnd_key ]
      if ((type = CND.type_of((cnd_method = CND[cnd_key]))) !== 'function') {
        throw new Error(`µ63693 expected a function for \`CND.${cnd_key}\`, found a ${type}`);
      }
      if (self[ity_type] == null) {
        self[ity_type] = cnd_method.bind(CND);
      }
    }
//---------------------------------------------------------------------------------------------------------
/* Bind all functions to `module.exports`: */
/* avoid to overwrite existing methods */    for (key in self) {
      value = self[key];
      /* TAINT use isa.callable */
      if (CND.isa_function(value)) {
        isa[key] = value.bind(isa);
      } else {
        isa[key] = value;
      }
    }
    //---------------------------------------------------------------------------------------------------------
    return null;
  })();

}).call(this);

//# sourceMappingURL=main.js.map
