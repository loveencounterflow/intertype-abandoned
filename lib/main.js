// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var Ajv, CND, L, assign, badge, debug, echo, help, info, jr, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'INTERTYPE/MAIN';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  ({assign, jr} = CND);

  L = this;

  Ajv = require('ajv');

  this.self = Symbol('self');

  //-----------------------------------------------------------------------------------------------------------
  this._message_from_error = function(data, error) {
    var R;
    R = [];
    R.push(`µ33892 property ${error.dataPath}: ${error.message} (got ${rpr(error.data)})`);
    return R.join('\n');
  };

  //-----------------------------------------------------------------------------------------------------------
  this._message_from_errors = function(data, errors) {
    var R, error, i, len;
    R = [];
    for (i = 0, len = errors.length; i < len; i++) {
      error = errors[i];
      R.push(this._message_from_error(data, error));
    }
    R.push('');
    R.push(jr(data));
    R.push('');
    return R.join('\n');
  };

  //-----------------------------------------------------------------------------------------------------------
  this.new_validation_hub = function(settings = null) {
    var R, defaults;
    defaults = {
      coerceTypes: false/* must be false for nullable to work as expected, but check for defaults */,
      allErrors: true,
      verbose: true,
      nullable: true/*  support keyword "nullable" from Open API 3 specification */,
      /* options to modify validated data: */
      // removeAdditional:   false
      useDefaults: 'empty'
    };
    // coerceTypes:        false
    //.........................................................................................................
    settings = Object.assign({}, settings, defaults);
    R = {};
    R[this.self] = new Ajv(settings);
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.add_schema_collection = function(me, schema_collection) {
    var schema, typename;
// delete schema.postprocess if ( postprocess = schema.postprocess )?
// delete schema.copy        if ( copy        = schema.copy        )?
// postprocess      ?= ( data ) -> data
// validate_and_cast = me.add schema
// return ( data ) =>
//   R = if copy then CND.deep_copy data else data
//   unless validate_and_cast R
//     throw new Error @_message_from_errors R, validate_and_cast.errors
//   return postprocess R
// nr              = ( Object.keys me.keys ).length + 1
// unless ( key = schema.$key )?
//   throw new Error "µ62562 schema must have a `$key`, found none"
// delet
    for (typename in schema_collection) {
      schema = schema_collection[typename];
      if (schema.$id == null) {
        schema.$id = typename;
      }
      me[this.self].addSchema(schema, typename);
    }
    return null;
  };

  // #-----------------------------------------------------------------------------------------------------------
  // @compile = ( me ) ->
  //   R = {}
  //   for key, url in me.keys
  //     R[ key ] = me[ @self ].compile url
  //   debug 'µ38887', me
  //   debug 'µ38887', R
  //   return R

  //-----------------------------------------------------------------------------------------------------------
  this.validate = function(me, key, x) {
    if (!me[this.self].validate(key, x)) {
      throw new Error(this._message_from_errors(x, me[this.self].errors));
    }
    return x;
  };

}).call(this);

//# sourceMappingURL=main.js.map
