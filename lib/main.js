// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var Animal, CND, INTERTYPE, X, Y, _xrpr, alert, assign, badge, debug, declare, flatten, get_rprs_of_tprs, help, info, inspect, intertype, isa, jr, k, rpr, sam, size_of, tom, type_of, types_of, urge, validate, warn, whisper, xrpr,
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'INTERTYPE/MAIN';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  ({assign, jr} = CND);

  flatten = require('lodash/flattenDeep');

  //...........................................................................................................
  ({inspect} = require('util'));

  _xrpr = function(x) {
    return inspect(x, {
      colors: true,
      breakLength: 2e308,
      maxArrayLength: 2e308,
      depth: 2e308
    });
  };

  xrpr = function(x) {
    return (_xrpr(x)).slice(0, 501);
  };

  this._js_type_of = function(x) {
    return ((Object.prototype.toString.call(x)).slice(8, -1)).toLowerCase();
  };

  //...........................................................................................................
  assign(this, require('./cataloguing'));

  assign(this, require('./sizing'));

  //-----------------------------------------------------------------------------------------------------------
  this.isa = (type, ...xP) => {
    var aspect, ref, spec, test;
    if ((this.type_of(...xP)) === type) {
      // debug 'µ33444', type, xP
      return true;
    }
    if ((spec = this.specs[type]) == null) {
      // check all constraints in spec
      throw new Error(`µ2345 unknown type ${rpr(type)}`);
    }
    ref = spec.tests;
    for (aspect in ref) {
      test = ref[aspect];
      if (!test.apply(this, xP)) {
        return false;
      }
    }
    return true;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.type_of = (...xP) => {
    var R;
    switch (R = this._js_type_of(...xP)) {
      case 'number':
        if ((xP[0] === 2e308) || (xP[0] === -2e308)) {
          return 'infinity';
        }
        if (Number.isNaN(xP[0])) {
          return 'nan';
        }
        return 'number';
      case 'regexp':
        return 'regex';
      case 'string':
        return 'text';
      case 'array':
        return 'list';
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.types_of = (...xP) => {
    var R, aspect, ok, ref, ref1, spec, test, type;
    R = [];
    ref = this.specs;
    for (type in ref) {
      spec = ref[type];
      ok = true;
      ref1 = spec.tests;
      for (aspect in ref1) {
        test = ref1[aspect];
        // debug 'µ27722', "#{type}/#{aspect}", test.apply @, xP
        if (!test.apply(this, xP)) {
          ok = false;
          break;
        }
      }
      if (ok) {
        R.push(type);
      }
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._validate = (type, ...xP) => {};

  //-----------------------------------------------------------------------------------------------------------
  this.validate = new Proxy(this._validate, {
    get: (target, type) => {
      return (...P) => {
        return target(type, ...P);
      };
    }
  });

  //-----------------------------------------------------------------------------------------------------------
  this.declare = (...P)/* type, spec, test */ => {
    var arity, spec, test, type, type_of_spec, type_of_test;
    // debug 'µ10001', P
    switch (arity = P.length) {
      //.......................................................................................................
      case 3:
        [type, spec, test] = P;
        //.....................................................................................................
        if ((type_of_spec = this._js_type_of(spec)) !== 'object') {
          throw new Error(`µ2468 expected an object for spec, got a ${type_of_spec}`);
        }
        //.....................................................................................................
        if ((type_of_test = this._js_type_of(test)) !== 'function') {
          throw new Error(`µ2591 expected a function for test, got a ${type_of_test}`);
        }
        //.....................................................................................................
        if (spec.tests != null) {
          throw new Error("µ2714 spec cannot have tests when tests are passed as argument");
        }
        //.....................................................................................................
        return this.declare(type, assign({}, spec, {
          tests: {
            main: test
          }
        }));
      //.......................................................................................................
      case 2:
        [type, spec] = P;
        break;
      default:
        //.......................................................................................................
        throw new Error(`µ2837 expected 2 or 3 arguments, got ${arity}`);
    }
    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /* TAINT make catalog of all 'deep JS' names that must never be used as types, b/c e.g a type 'bind'
    would shadow native `f.bind()` */
    if (type === 'bind') { // toString, ...
      throw new Error(`µ2292 ${rpr(type)} is not a legal type name`);
    }
    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    switch (type_of_spec = this._js_type_of(spec)) {
      //.......................................................................................................
      case 'function':
        return this.declare(type, {
          tests: {
            main: spec
          }
        });
      //.......................................................................................................
      case 'asyncfunction':
        throw "µ2960 asynchronous functions not yet supported";
      //.......................................................................................................
      case 'object':
        if (this.specs[type] != null) {
          throw new Error(`µ3083 type ${rpr(type)} already declared`);
        }
        spec = assign({}, spec);
        this.specs[type] = spec;
        this.isa[type] = (...P) => {
          return this.isa(type, ...P);
        };
        // @validate[ type ]    = ( P... ) => @validate type, P...
        spec.size_of = this._sizeof_method_from_spec(type, spec);
        break;
      default:
        //.......................................................................................................
        throw `µ3206 expected (sync, async) function or object for spec, got a ${type_of_spec}`;
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.specs = {};

  //===========================================================================================================
  // TYPE DECLARATIONS
  //-----------------------------------------------------------------------------------------------------------
  this.declare('null', (x) => {
    return x === null;
  });

  this.declare('undefined', (x) => {
    return x === void 0;
  });

  this.declare('boolean', (x) => {
    return (x === true) || (x === false);
  });

  this.declare('nan', (x) => {
    return Number.isNaN(x);
  });

  this.declare('finite', (x) => {
    return Number.isFinite(x);
  });

  this.declare('integer', (x) => {
    return Number.isInteger(x);
  });

  this.declare('safeinteger', (x) => {
    return Number.isSafeInteger(x);
  });

  this.declare('number', (x) => {
    return Number.isFinite(x);
  });

  this.declare('frozen', (x) => {
    return Object.isFrozen(x);
  });

  this.declare('sealed', (x) => {
    return Object.isSealed(x);
  });

  this.declare('extensible', (x) => {
    return Object.isExtensible(x);
  });

  //...........................................................................................................
  this.declare('numeric', (x) => {
    return (this._js_type_of(x)) === 'number';
  });

  this.declare('function', (x) => {
    return (this._js_type_of(x)) === 'function';
  });

  this.declare('asyncfunction', (x) => {
    return (this._js_type_of(x)) === 'asyncfunction';
  });

  this.declare('generatorfunction', (x) => {
    return (this._js_type_of(x)) === 'generatorfunction';
  });

  this.declare('callable', (x) => {
    var ref;
    return (ref = this.type_of(x)) === 'function' || ref === 'asyncfunction' || ref === 'generatorfunction';
  });

  //...........................................................................................................
  this.declare('truthy', (x) => {
    return !!x;
  });

  this.declare('falsy', (x) => {
    return !x;
  });

  this.declare('unset', (x) => {
    return x == null;
  });

  this.declare('notunset', (x) => {
    return x != null;
  });

  //...........................................................................................................
  this.declare('even', (x) => {
    return this.isa.multiple_of(x, 2);
  });

  this.declare('odd', (x) => {
    return !this.isa.even(x);
  });

  this.declare('count', function(x) {
    return (this.isa.safeinteger(x)) && (this.isa.nonnegative(x));
  });

  this.declare('nonnegative', (x) => {
    return (this.isa.number(x)) && (x >= 0);
  });

  this.declare('positive', (x) => {
    return (this.isa.number(x)) && (x > 0);
  });

  this.declare('zero', (x) => {
    return x === 0;
  });

  this.declare('nonpositive', (x) => {
    return (this.isa.number(x)) && (x <= 0);
  });

  this.declare('negative', (x) => {
    return (this.isa.number(x)) && (x < 0);
  });

  this.declare('multiple_of', (x, n) => {
    return (this.isa.number(x)) && (modulo(x, n)) === 0;
  });

  //...........................................................................................................
  this.declare('buffer', {
    size: 'length'
  }, (x) => {
    return Buffer.isBuffer(x);
  });

  this.declare('list', {
    size: 'length'
  }, (x) => {
    return (this._js_type_of(x)) === 'array';
  });

  this.declare('object', {
    size: 'length'
  }, (x) => {
    return (this._js_type_of(x)) === 'object';
  });

  this.declare('text', {
    size: 'length'
  }, (x) => {
    return (this._js_type_of(x)) === 'string';
  });

  this.declare('set', {
    size: 'size'
  }, function(x) {
    return (this._js_type_of(x)) === 'set'; // { size_of: 'size',  }
  });

  this.declare('map', {
    size: 'size'
  }, function(x) {
    return (this._js_type_of(x)) === 'map'; // { size_of: 'size',  }
  });

  this.declare('weakmap', function(x) {
    return (this._js_type_of(x)) === 'weakmap';
  });

  this.declare('weakset', function(x) {
    return (this._js_type_of(x)) === 'weakset';
  });

  //-----------------------------------------------------------------------------------------------------------
  // list:       'length'
  // # arguments:  'length'
  // buffer:     'length'
  // set:        'size'
  // map:        'size'
  // #.........................................................................................................
  // global:     ( x ) => ( @all_keys_of x ).length
  // pod:        ( x ) => ( @keys_of     x ).length
  // #.........................................................................................................
  // text:       ( x, selector = 'codeunits' ) ->
  //   switch selector
  //     when 'codepoints' then return ( Array.from x ).length
  //     when 'codeunits'  then return x.length
  //     when 'bytes'      then return Buffer.byteLength x, ( settings?[ 'encoding' ] ? 'utf-8' )
  //     else throw new Error "unknown counting selector #{rpr selector}"

  // @declare 'boundfunction', { supertype: 'callable', }, ( x ) => ( ( @supertype_of x ) is 'callable' ) and ( not Object.hasOwnProperty x, 'prototype' )
  // @declare 'boundfunction',       ( x ) => ( @isa 'callable', x ) and ( not Object.hasOwnProperty x, 'prototype' )

  // Array.isArray
  // ArrayBuffer.isView
  // Atomics.isLockFree
  // Buffer.isBuffer
  // Buffer.isEncoding
  // constructor.is
  // constructor.isExtensible
  // constructor.isFrozen
  // constructor.isSealed
  // Number.isFinite
  // Number.isInteger
  // Number.isNaN
  // Number.isSafeInteger
  // Object.is
  // Object.isExtensible
  // Object.isFrozen
  // Object.isSealed
  // Reflect.isExtensible
  // root.isFinite
  // root.isNaN
  // Symbol.isConcatSpreadable

  // debug Object.getOwnPropertyDescriptors @
  // process.exit 1

  //-----------------------------------------------------------------------------------------------------------
  this.create = function() {
    var R;
    // R           = Object.create @
    // R.specs     = Object.create @specs
    // R.isa       = ( P... ) => @isa P...
    // R.validate  = Object.create @validate
    // for k, v of R
    //   debug 'µ5009', k, v
    // R[ k ] = if v.bind? then v.bind R else v
    R = assign({}, this);
    // assign R.isa,       @isa
    // assign R.validate,  @validate
    debug('µ2229', this.isa.number);
    debug('µ2229', R.isa.number);
    debug('µ2229', R.isa.number(42));
    debug('µ2229', R.isa.number('42'));
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.get_bound_functions = function() {
    var R, k, ref, v;
    R = {};
    ref = this;
    for (k in ref) {
      v = ref[k];
      if (v.bind == null) {
        /* TAINT use proper check for callable */
        continue;
      }
      R[k] = v.bind(this);
    }
    return R;
  };

  if (module.parent == null) {
    //=========================================================================================================
    Animal = class Animal {
      constructor(name) {
        this.name = name;
        this.friends = {};
      }

      move(meters) {
        return info(this.name + ` moved ${meters}m.`);
      }

    };
    sam = new Animal("Sammy the Python");
    tom = new Animal("Tommy the Palomino");
    sam.move(5);
    tom.move(5);
    debug(sam.friends);
    debug(tom.friends);
    debug(sam.friends === tom.friends);
    process.exit(1);
  }

  //###########################################################################################################
  if (module.parent == null) {
    INTERTYPE = this;
    intertype = INTERTYPE.create();
    ({isa, validate, type_of, types_of, size_of, declare} = intertype.get_bound_functions());
    info('µ01-1', isa('number', 42));
    info('µ01-2', isa('number', 0/0));
    info('µ01-3', isa('text', 0/0));
    info('µ01-4', isa('text', 'x'));
    whisper('-'.repeat(108));
    info('µ01-5', this._js_type_of((function() {})));
    info('µ01-6', this._js_type_of((function() {}).bind(this)));
    info('µ01-7', this._js_type_of((function*() {
      return (yield 42);
    })));
    info('µ01-8', this._js_type_of((function*() {
      return (yield 42);
    })()));
    info('µ01-9', this._js_type_of((async function() {
      return (await 42);
    })));
    whisper('-'.repeat(108));
    info('µ01-10', type_of((function() {})));
    info('µ01-11', type_of((function() {}).bind(this)));
    info('µ01-12', type_of((function*() {
      return (yield 42);
    })));
    info('µ01-13', type_of((function*() {
      return (yield 42);
    })()));
    info('µ01-14', type_of((async function() {
      return (await 42);
    })));
    whisper('-'.repeat(108));
    info('µ01-15', isa('callable', 'xxx'));
    info('µ01-16', isa('callable', (function() {})));
    info('µ01-17', isa('callable', (function() {}).bind(this)));
    info('µ01-18', isa('callable', (function*() {
      return (yield 42);
    })));
    info('µ01-19', isa('callable', (function*() {
      return (yield 42);
    })()));
    info('µ01-20', isa('callable', (async function() {
      return (await 42);
    })));
    whisper('-'.repeat(108));
    info('µ01-21', isa('date', new Date()));
    info('µ01-22', type_of(new Date()));
    info('µ01-23', isa('number', 123));
    info('µ01-24', isa('integer', 123));
    info('µ01-25', isa('finite', 123));
    info('µ01-26', isa('safeinteger', 123));
    info('µ01-27', type_of(123));
    info('µ01-28', isa.number(123));
    info('µ01-29', isa.integer(123));
    info('µ01-30', isa.finite(123));
    info('µ01-31', isa.safeinteger(123));
    info('µ01-32', types_of(123));
    info('µ01-33', types_of(124));
    info('µ01-34', types_of(0));
    info('µ01-35', types_of(true));
    info('µ01-36', types_of(null));
    info('µ01-37', types_of(void 0));
    info('µ01-38', types_of({}));
    info('µ01-39', type_of({}));
    info('µ01-40', types_of([]));
    info('µ01-41', type_of([]));
    info('µ01-42', jr(INTERTYPE.all_keys_of([null])));
    info('µ01-43', type_of(global));
    info('µ01-44', isa('global', global));
    info('µ01-45', isa('number', 0/0));
    info('µ01-46', type_of('xxx'));
    // info 'µ01-47', size_of 'xxx'
    // info 'µ01-48', isa 'array',  []
    X = {};
    X.x = true;
    X.spec = {};
    X.spec.spec_of_X = true;
    Y = Object.create(X);
    Y.y = true;
    Y.spec = Object.create(X.spec);
    Y.spec.spec_of_Y = true;
    debug(X, jr((function() {
      var results;
      results = [];
      for (k in X) {
        results.push(k);
      }
      return results;
    })()));
    debug(X.spec, jr((function() {
      var results;
      results = [];
      for (k in X.spec) {
        results.push(k);
      }
      return results;
    })()));
    debug(Y, jr((function() {
      var results;
      results = [];
      for (k in Y) {
        results.push(k);
      }
      return results;
    })()));
    debug(Y.spec, jr((function() {
      var results;
      results = [];
      for (k in Y.spec) {
        results.push(k);
      }
      return results;
    })()));
    Y.spec.spec_of_X = false;
    info(X.spec.spec_of_X);
    info(X.spec.spec_of_Y);
    info(Y.spec.spec_of_X);
    info(Y.spec.spec_of_Y);
  }

  // xxx = require '../../intertype-abandoned/lib/main'
  // for gk from xxx.walk_all_keys_of global
  //   continue if gk in [ 'global', 'GLOBAL', ]
  //   for lk from xxx.walk_all_keys_of global[ gk ]
  //     continue unless lk.startsWith 'is'
  //     continue if lk is 'isPrototypeOf'
  //     info 'µ28882', "#{gk}.#{lk}"
  /*
  isa 'integer', 42
  isa.integer 42
  isa.multiple_of 42, 2
  isa[ 'multiple_of' ] 42, 2
  isa.even 42
  type_of 42 # 'number'
  */
  //-----------------------------------------------------------------------------------------------------------
  get_rprs_of_tprs = function(tprs) {
    /* `tprs: test parameters, i.e. additional arguments to type tester, as in `multiple_of x, 4` */
    var rpr_of_tprs, srpr_of_tprs;
    rpr_of_tprs = (function() {
      switch (tprs.length) {
        case 0:
          return '';
        case 1:
          return `${rpr(tprs[0])}`;
        default:
          return `${rpr(tprs)}`;
      }
    })();
    srpr_of_tprs = (function() {
      switch (rpr_of_tprs.length) {
        case 0:
          return '';
        default:
          return ' ' + rpr_of_tprs;
      }
    })();
    return {rpr_of_tprs, srpr_of_tprs};
  };

}).call(this);

//# sourceMappingURL=main.js.map
