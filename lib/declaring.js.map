{
  "version": 3,
  "file": "declaring.js",
  "sourceRoot": "..",
  "sources": [
    "src/declaring.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTYPE/DECLARING'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\n#...........................................................................................................\n{ assign\n  jr\n  flatten\n  xrpr\n  js_type_of }            = require './helpers'\nisa_copy                  = Symbol 'isa_copy'\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT make catalog of all 'deep JS' names that must never be used as types, b/c e.g a type 'bind'\nwould shadow native `f.bind()` ###\n@illegal_types = [\n  'bind'\n  'toString'\n  'valueOf'\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\ncopy_if_original = ( x ) ->\n  return x if x[ isa_copy ]\n  R = assign {}, x\n  R[ isa_copy ] = true\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_check_spec = ( type, xP... ) ->\n  ### Check all constraints in spec: ###\n  throw new Error \"µ6500 unknown type #{rpr type}\" unless ( spec = @specs[ type ] )?\n  for aspect, test of spec.tests\n    return false unless test.apply @, xP\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\n@type_of = ( xP... ) ->\n  switch R = js_type_of xP...\n    when 'number'\n      ### TAINT this should be generalized for all Intertype types that split up / rename a JS type: ###\n      for subtype in [ 'nan', 'infinity', ]\n        return subtype if @_check_spec subtype, xP...\n    when 'regexp' then R = 'regex'\n    when 'string' then R = 'text'\n    when 'array'  then R = 'list'\n  ### Refuse to answer question in case type found is not in specs: ###\n  # debug 'µ33332', R, ( k for k of @specs )\n  throw new Error \"µ6623 unknown type #{rpr R}\" unless @specs[ R ]?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@types_of = ( xP... ) ->\n  R = []\n  for type, spec of @specs\n    ok = true\n    for aspect, test of spec.tests\n      # debug 'µ27722', \"#{type}/#{aspect}\", test.apply @, xP\n      unless test.apply @, xP\n        ok = false\n        break\n    R.push type if ok\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@declare = ( P... ### type, spec?, test? ### ) ->\n  debug 'µ33374-0', 'declare', P\n  switch arity = P.length\n    when 1 then return @_declare_1 P...\n    when 2 then return @_declare_2 P...\n    when 3 then return @_declare_3 P...\n  throw new Error \"µ6746 expected between 1 and 3 arguments, got #{arity}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_declare_1 = ( spec ) ->\n  debug 'µ33374-1', '_declare_1', spec\n  #.........................................................................................................\n  unless ( T = js_type_of spec ) is 'object'\n    throw new Error \"µ6869 expected an object for spec, got a #{T}\"\n  #.........................................................................................................\n  unless ( T = js_type_of spec.type ) is 'string'\n    throw new Error \"µ6992 expected a text for spec.type, got a #{T}\"\n  #.........................................................................................................\n  unless ( T = js_type_of spec.tests ) is 'object'\n    throw new Error \"µ7115 expected an object for spec.tests, got a #{T}\"\n  #.........................................................................................................\n  return @_declare spec\n\n#-----------------------------------------------------------------------------------------------------------\n@_declare_2 = ( type, spec_or_test ) ->\n  debug 'µ33374-2', '_declare_2', type, spec_or_test\n  switch T = js_type_of spec_or_test\n    #.......................................................................................................\n    when 'function'\n      return @_declare_1 { type, tests: { main: spec_or_test, }, }\n    #.......................................................................................................\n    when 'asyncfunction'\n      throw \"µ7238 asynchronous functions not yet supported\"\n  #.........................................................................................................\n  if T isnt 'object'\n    throw new Error \"µ7361 expected an object, got a #{T} for spec\"\n  #.........................................................................................................\n  if spec_or_test.type? and ( not spec_or_test.type is type )\n    throw new Error \"µ7484 type declarations #{rpr type} and #{rpr spec_or_test.type} do not match\"\n  #.........................................................................................................\n  spec      = copy_if_original spec_or_test\n  spec.type = type\n  return @_declare_1 spec\n\n#-----------------------------------------------------------------------------------------------------------\n@_declare_3 = ( type, spec, test ) ->\n  debug 'µ33374-3', '_declare_3', type, spec, test\n  #.........................................................................................................\n  if ( T = js_type_of spec ) isnt 'object'\n    throw new Error \"µ7607 expected an object, got a #{T} for spec\"\n  #.........................................................................................................\n  unless ( T = js_type_of test ) is 'function'\n    throw new Error \"µ7730 expected a function for test, got a #{T}\"\n  #.........................................................................................................\n  if spec.tests?\n    throw new Error \"µ7853 spec cannot have tests when tests are passed as argument\"\n  #.........................................................................................................\n  spec       = copy_if_original spec\n  spec.tests = { main: test, }\n  return @_declare_2 type, spec\n\n#-----------------------------------------------------------------------------------------------------------\n@_declare = ( spec ) ->\n  spec      = copy_if_original spec\n  delete spec[ isa_copy ]\n  debug 'µ33374-4', '_declare', spec\n  { type, } = spec\n  spec.type = type\n  #.........................................................................................................\n  if type in @illegal_types\n    throw new Error \"µ7976 #{rpr type} is not a legal type name\"\n  #.........................................................................................................\n  if ( @specs[ type ] )?\n    throw new Error \"µ8099 type #{rpr type} already declared\"\n  #.........................................................................................................\n  @specs[ type ]  = spec\n  @isa[ type ]    = ( P... ) => @isa type, P...\n  # @validate[ type ]    = ( P... ) => @validate type, P...\n  spec.size_of    = @_sizeof_method_from_spec type, spec\n  #.........................................................................................................\n  return null\n\n\n"
  ]
}