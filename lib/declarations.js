// Generated by CoffeeScript 2.3.2
(function() {
  //...........................................................................................................
  var assign, flatten, jr, js_type_of, xrpr,
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  ({assign, jr, flatten, xrpr, js_type_of} = require('./helpers'));

  //===========================================================================================================
  // TYPE DECLARATIONS
  //-----------------------------------------------------------------------------------------------------------
  this.declare_types = function() {
    var k;
    /* NOTE to be called as `( require './declarations' ).declare_types.apply instance` */
    this.declare('null', (x) => {
      return x === null;
    });
    this.declare('undefined', (x) => {
      return x === void 0;
    });
    this.declare('boolean', (x) => {
      return (x === true) || (x === false);
    });
    this.declare('nan', (x) => {
      return Number.isNaN(x);
    });
    this.declare('finite', (x) => {
      return Number.isFinite(x);
    });
    this.declare('integer', (x) => {
      return Number.isInteger(x);
    });
    this.declare('safeinteger', (x) => {
      return Number.isSafeInteger(x);
    });
    this.declare('number', (x) => {
      return Number.isFinite(x);
    });
    this.declare('frozen', (x) => {
      return Object.isFrozen(x);
    });
    this.declare('sealed', (x) => {
      return Object.isSealed(x);
    });
    this.declare('extensible', (x) => {
      return Object.isExtensible(x);
    });
    //.........................................................................................................
    this.declare('numeric', (x) => {
      return (js_type_of(x)) === 'number';
    });
    this.declare('function', (x) => {
      return (js_type_of(x)) === 'function';
    });
    this.declare('asyncfunction', (x) => {
      return (js_type_of(x)) === 'asyncfunction';
    });
    this.declare('generatorfunction', (x) => {
      return (js_type_of(x)) === 'generatorfunction';
    });
    this.declare('generator', (x) => {
      return (js_type_of(x)) === 'generator';
    });
    this.declare('date', (x) => {
      return (js_type_of(x)) === 'date';
    });
    this.declare('global', (x) => {
      return (js_type_of(x)) === 'global';
    });
    this.declare('callable', (x) => {
      var ref;
      return (ref = this.type_of(x)) === 'function' || ref === 'asyncfunction' || ref === 'generatorfunction';
    });
    //.........................................................................................................
    this.declare('truthy', (x) => {
      return !!x;
    });
    this.declare('falsy', (x) => {
      return !x;
    });
    this.declare('unset', (x) => {
      return x == null;
    });
    this.declare('notunset', (x) => {
      return x != null;
    });
    //.........................................................................................................
    this.declare('even', (x) => {
      return this.isa.multiple_of(x, 2);
    });
    this.declare('odd', (x) => {
      return !this.isa.even(x);
    });
    this.declare('count', function(x) {
      return (this.isa.safeinteger(x)) && (this.isa.nonnegative(x));
    });
    this.declare('nonnegative', (x) => {
      return (this.isa.number(x)) && (x >= 0);
    });
    this.declare('positive', (x) => {
      return (this.isa.number(x)) && (x > 0);
    });
    this.declare('zero', (x) => {
      return x === 0;
    });
    this.declare('infinity', (x) => {
      return (x === +2e308) || (x === -2e308);
    });
    this.declare('nonpositive', (x) => {
      return (this.isa.number(x)) && (x <= 0);
    });
    this.declare('negative', (x) => {
      return (this.isa.number(x)) && (x < 0);
    });
    this.declare('multiple_of', (x, n) => {
      return (this.isa.number(x)) && (modulo(x, n)) === 0;
    });
    //.........................................................................................................
    this.declare('buffer', {
      size: 'length'
    }, (x) => {
      return Buffer.isBuffer(x);
    });
    console.log('µ77633\n', ((function() {
      var results;
      results = [];
      for (k in this.specs) {
        results.push(k);
      }
      return results;
    }).call(this)).join('\t'));
    console.log('µ77633\n', ((function() {
      var results;
      results = [];
      for (k in this.specs) {
        results.push(k);
      }
      return results;
    }).call(this)).sort().join('\t'));
    this.declare('zeroXXXXXXXXX', (x) => {
      return x === 0;
    });
    this.declare('list', {
      size: 'length'
    }, (x) => {
      return (js_type_of(x)) === 'array';
    });
    this.declare('object', {
      size: 'length'
    }, (x) => {
      return (js_type_of(x)) === 'object';
    });
    this.declare('text', {
      size: 'length'
    }, (x) => {
      return (js_type_of(x)) === 'string';
    });
    this.declare('set', {
      size: 'size'
    }, function(x) {
      return (js_type_of(x)) === 'set';
    });
    this.declare('map', {
      size: 'size'
    }, function(x) {
      return (js_type_of(x)) === 'map';
    });
    this.declare('weakmap', function(x) {
      return (js_type_of(x)) === 'weakmap';
    });
    return this.declare('weakset', function(x) {
      return (js_type_of(x)) === 'weakset';
    });
  };

  //-----------------------------------------------------------------------------------------------------------
// list:       'length'
// # arguments:  'length'
// buffer:     'length'
// set:        'size'
// map:        'size'
// #.........................................................................................................
// global:     ( x ) => ( @all_keys_of x ).length
// pod:        ( x ) => ( @keys_of     x ).length
// #.........................................................................................................
// text:       ( x, selector = 'codeunits' ) ->
//   switch selector
//     when 'codepoints' then return ( Array.from x ).length
//     when 'codeunits'  then return x.length
//     when 'bytes'      then return Buffer.byteLength x, ( settings?[ 'encoding' ] ? 'utf-8' )
//     else throw new Error "unknown counting selector #{rpr selector}"

// @declare 'boundfunction', { supertype: 'callable', }, ( x ) => ( ( @supertype_of x ) is 'callable' ) and ( not Object.hasOwnProperty x, 'prototype' )
// @declare 'boundfunction',       ( x ) => ( @isa 'callable', x ) and ( not Object.hasOwnProperty x, 'prototype' )

// Array.isArray
// ArrayBuffer.isView
// Atomics.isLockFree
// Buffer.isBuffer
// Buffer.isEncoding
// constructor.is
// constructor.isExtensible
// constructor.isFrozen
// constructor.isSealed
// Number.isFinite
// Number.isInteger
// Number.isNaN
// Number.isSafeInteger
// Object.is
// Object.isExtensible
// Object.isFrozen
// Object.isSealed
// Reflect.isExtensible
// root.isFinite
// root.isNaN
// Symbol.isConcatSpreadable

}).call(this);

//# sourceMappingURL=declarations.js.map
