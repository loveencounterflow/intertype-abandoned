// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, ITYPE, alert, badge, debug, get_schema_A, help, info, jr, rpr, test, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'INTERTYPE/TESTS/MAIN';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  jr = JSON.stringify;

  ITYPE = require('../..');

  test = require('guy-test');

  //-----------------------------------------------------------------------------------------------------------
  get_schema_A = function() {
    var R;
    R = {
      //.........................................................................................................
      position: {
        // $id:      'http://codemirror.net/types/position'
        type: 'object',
        properties: {
          line: {
            type: 'number',
            not: {
              'type': 'null'
            }
          },
          ch: {
            type: 'number',
            not: {
              'type': 'null'
            }
          }
        },
        required: ['line', 'ch']
      },
      //.........................................................................................................
      range: {
        // $id:      'http://codemirror.net/types/range'
        type: 'object',
        properties: {
          from: {
            $ref: 'position'
          },
          to: {
            $ref: 'position'
          }
        },
        required: ['from', 'to']
      }
    };
    //.......................................................................................................
    return R;
  };

  //   schema =
  //     # properties:
  //     #   foo:  { type: 'integer', }
  //     #   bar:  { type: 'boolean', }
  //     # required: [ 'foo', 'bar', ]
  //     # additionalProperties: false
  //     $id: 'foobar'
  //     properties:
  //       abs:    { type: 'number', }
  //       rel:    { type: 'number', }
  //       lines:  { type: [ 'boolean', 'string', ], }
  //     # required:             [ 'foo', 'bar', ]
  //     additionalProperties: false

  //   hub       = ITYPE.new_validation_hub()
  //   ITYPE.add_schema hub, schema

  //   probes = [
  //     { abs: '0.8', }
  //     { abs: '0.8', lines: '', }
  //     { rel: '0.8', }
  //     { rel: '0.8', lines: '', }
  //     { foo: '1', bar: 'true', baz: 'true' }
  //     # { foo: '1.1', bar: 'f', baz: 'true' }
  //     # {}
  //     # { foo: '1', bar: 'true', }
  //     ]
  //   for probe in probes
  //     echo()
  //     try
  //       ITYPE.validate hub, 'foobar', probe
  //     catch error
  //       warn error.message
  //       continue
  //     help probe

  //-----------------------------------------------------------------------------------------------------------
  this["basic"] = async function(T, done) {
    var data, error, hub, i, len, matcher, probe, probes_and_matchers, ref, schema, typename;
    hub = ITYPE.new_validation_hub();
    ref = get_schema_A();
    for (typename in ref) {
      schema = ref[typename];
      schema.$id = typename;
      ITYPE.add_schema(hub, schema);
    }
    //.........................................................................................................
    probes_and_matchers = [
      [
        [
          'position',
          {
            line: 42,
            ch: 21
          }
        ],
        true,
        null
      ],
      [
        [
          'range',
          {
            from: {
              line: 42,
              ch: 21
            },
            to: {
              line: 10,
              ch: 11
            }
          }
        ],
        true,
        null
      ],
      [
        [
          //.......................................................................................................
          'position',
          {
            line: 42
          }
        ],
        null,
        'µ66533'
      ],
      [
        [
          'position',
          {
            line: 42,
            ch: null
          }
        ],
        null,
        'µ66533'
      ],
      [
        [
          'position',
          {
            line: 42,
            ch: 'x'
          }
        ],
        null,
        'µ66533'
      ],
      [
        [
          'range',
          {
            from: {
              line: 42
            },
            to: {
              line: 10,
              ch: 11
            }
          }
        ],
        null,
        'µ66533'
      ],
      [
        [
          'range',
          {
            from: {
              line: 42,
              ch: 21
            },
            to: {
              line: 10,
              ch: null
            }
          }
        ],
        null,
        'µ66533'
      ],
      [
        [
          'range',
          {
            from: {
              line: 42,
              ch: null
            },
            to: {
              line: 10,
              ch: 11
            }
          }
        ],
        null,
        'µ66533'
      ],
      [
        [
          'range',
          {
            from: {
              line: 42,
              ch: 'x'
            },
            to: {
              line: 10,
              ch: 11
            }
          }
        ],
        null,
        'µ66533'
      ]
    ];
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      // matcher = CND.deep_copy probe
      [typename, data] = probe;
      if (matcher === true) {
        matcher = data;
      }
      await T.perform(probe, matcher, error, function() {
        return new Promise(function(resolve, reject) {
          var result;
          result = ITYPE.validate(hub, typename, data);
          if (result !== data) {
            throw new Error("expected same object, got another one");
          }
          resolve(result);
          return null;
        });
      });
    }
    done();
    return null;
  };

  //###########################################################################################################
  if (module.parent == null) {
    test(this);
  }

  // test @[ "basic" ]

}).call(this);

//# sourceMappingURL=main.test.js.map
