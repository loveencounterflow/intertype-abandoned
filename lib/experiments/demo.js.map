{
  "version": 3,
  "file": "demo.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'INTERTYPE/experiments/demo'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\npraise                    = CND.get_logger 'praise',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# test                      = require 'guy-test'\nisa                       = require '../..'\n{ jr }                    = CND\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  info 'µ0101-1', \"\"\"isa.number 42\"\"\",                            CND.truth isa.number 42\n  info 'µ0101-2', \"\"\"isa.finite_number 42\"\"\",                     CND.truth isa.finite_number 42\n  info 'µ0101-3', \"\"\"isa.infinity Infinity\"\"\",                    CND.truth isa.infinity Infinity\n  info 'µ0101-4', \"\"\"isa.infinity 42\"\"\",                          CND.truth isa.infinity 42\n  info 'µ0101-5', \"\"\"isa.integer 42\"\"\",                           CND.truth isa.integer 42\n  info 'µ0101-6', \"\"\"isa.integer 42.1\"\"\",                         CND.truth isa.integer 42.1\n  info 'µ0101-7', \"\"\"isa.count 42\"\"\",                             CND.truth isa.count 42\n  info 'µ0101-8', \"\"\"isa.count -42\"\"\",                            CND.truth isa.count -42\n  info 'µ0101-9', \"\"\"isa.count 42.1\"\"\",                           CND.truth isa.count 42.1\n  info 'µ0101-10', \"\"\"isa.callable 42.1\"\"\",                       CND.truth isa.callable 42.1\n  info 'µ0101-11', \"\"\"isa.callable ( -> )\"\"\",                     CND.truth isa.callable ( -> )\n  info 'µ0101-12', \"\"\"isa.extends 'function', 'callable'\"\"\",      CND.truth isa.extends 'function', 'callable'\n  info 'µ0101-13', \"\"\"isa.extends 'safe_integer', 'integer'\"\"\",   CND.truth isa.extends 'safe_integer', 'integer'\n  info 'µ0101-14', \"\"\"isa.extends 'safe_integer', 'number'\"\"\",    CND.truth isa.extends 'safe_integer', 'number'\n  info 'µ0101-15', \"\"\"isa.type_of ( -> )\"\"\",                      CND.truth isa.type_of ( -> )\n  info 'µ0101-16', \"\"\"isa.type_of ( -> await f() )\"\"\",            CND.truth isa.type_of ( -> await f() )\n  info 'µ0101-17', \"\"\"isa.supertype_of ( -> )\"\"\",                 CND.truth isa.supertype_of ( -> )\n  info 'µ0101-18', \"\"\"isa.supertype_of ( -> await f() )\"\"\",       CND.truth isa.supertype_of ( -> await f() )\n  info 'µ0101-19', \"\"\"isa.type_of 42\"\"\",                          CND.truth isa.type_of 42\n  info 'µ0101-20', \"\"\"isa.type_of 42.1\"\"\",                        CND.truth isa.type_of 42.1\n  info 'µ0101-21', \"\"\"isa.supertype_of 42\"\"\",                     CND.truth isa.supertype_of 42\n  info 'µ0101-22', \"\"\"isa.supertype_of 42.1\"\"\",                   CND.truth isa.supertype_of 42.1\n  info 'µ0101-23', \"\"\"isa.multiple_of 33, 3\"\"\",                   CND.truth isa.multiple_of 33, 3\n  info 'µ0101-24', \"\"\"isa.multiple_of 33, 11\"\"\",                  CND.truth isa.multiple_of 33, 11\n  info 'µ0101-25', \"\"\"isa.multiple_of 5, 2.5\"\"\",                  CND.truth isa.multiple_of 5, 2.5\n  info 'µ0101-25', \"\"\"isa.multiple_of 5, 2.6\"\"\",                  CND.truth isa.multiple_of 5, 2.6\n  info 'µ0101-26', \"\"\"isa.even Infinity\"\"\",                       CND.truth isa.even Infinity\n  info 'µ0101-27', \"\"\"isa.odd Infinity\"\"\",                        CND.truth isa.odd Infinity\n\n  info 'µ0102-1', isa.values_of isa.keys_of { line: 42, ch: 33, }\n  info 'µ0102-2', isa.values_of isa.keys_of { line: 42, }\n  info 'µ0102-3', isa.values_of isa.keys_of { line: 42, ch: undefined, }\n  info 'µ0102-4', isa.has_keys { line: 42, ch: 33, }, [ 'line', ]\n  info 'µ0102-5', isa.has_keys { line: 42, ch: undefined, }, [ 'line', 'ch', ]\n  info 'µ0102-6', isa.has_keys { line: 42, ch: 33, }, [ 'line', 'ch', ]\n  info 'µ0102-7', isa.has_keys { line: 42, ch: 33, }, [ 'line', 'ch', 'other', ]\n  info 'µ0102-8', isa.has_only_keys { line: 42, ch: 33, }, [ 'line', ]\n  info 'µ0102-9', isa.has_only_keys { line: 42, ch: undefined, }, [ 'line', 'ch', ]\n  info 'µ0102-10', isa.has_only_keys { line: 42, ch: 33, }, [ 'line', 'ch', ]\n  info 'µ0102-11', isa.has_only_keys { line: 42, ch: 33, }, [ 'line', 'ch', 'other', ]\n\n\n\n  # urge 'µ44433-1', ( isa.keys_of isa.validate )\n  urge 'µ44433-2', isa.validate.integer 123\n  # urge 'µ44433-2', isa.validate.integer 123.4\n  try urge 'µ44433-3', ( isa.validate 'integer', \"that should've been an $type: $value\" ) 123 catch error then warn error.message\n  try urge 'µ44433-4', ( isa.validate 'integer', \"that should've been an $type: $value\" ) 123.456 catch error then warn error.message\n  try urge 'µ44433-5', isa.validate.has_keys {}, 'foo'\n  # try urge 'µ44433-6', isa.validate.multiple_of 3, 6, \"that should've been an $type: $value\" catch error then warn error.message\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_supertypes = ->\n  # help 'µ44455-1', isa.supertypes\n  help 'µ44455-1', isa.extends( 'odd', 'number' )\n  help 'µ44455-2', isa.extends( 'odd', 'integer' )\n  help 'µ44455-3', isa.extends( 'integer', 'number' )\n  help 'µ44455-4', isa.extends( 'safe_integer', 'integer' )\n  help 'µ44455-4', isa.extends( 'safe_integer', 'text' )\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_object_shapes = ->\n  isa.add_type 'nonempty_text', ( x ) -> ( @text x  ) and ( @nonempty x )\n  isa.add_type 'triple',        ( x ) -> ( @count x ) and ( @multiple_of x, 3 ) and ( x < 10 )\n  # debug isa.known_types()\n  #.........................................................................................................\n  for n in [ -4 .. 10 ]\n    try\n      info n, ( isa.triple n ), ( isa.validate.triple n ) # , \"this is not a triple: $value\"\n    catch error\n      warn error.message\n  #.........................................................................................................\n  isa.add_type 'foobarcat', { supertype: 'pod', }, ( x ) ->\n    return false unless @pod            x\n    return false unless @has_keys       x, 'foo', 'bar', 'cat'\n    return false unless @nonempty_text  x.bar\n    return false unless @nonempty_text  x.cat\n    return true\n  #.........................................................................................................\n  isa.add_type 'foobarflapcat', { supertype: 'foobarcat', }, ( x ) ->\n    ### TAINT shouldn't have to check manually for supertype ###\n    return false unless @foobarcat  x\n    return false unless @has_keys   x, 'flap'\n    # return false unless @count      x.flap\n  #.........................................................................................................\n  probes = [\n    { foo: 3, bar: 'a text', }\n    { foo: 3, bar: 'a text', cat: '', }\n    { foo: 3, bar: 'a text', cat: 'cats!', }\n    { foo: 3, bar: 'a text', cat: 'cats!', flap: 3, }\n    { foo: 3, bar: 'a text', cat: 'cats!', flap: -3, }\n    ]\n  #.........................................................................................................\n  for probe in probes\n    for type in [ 'foobarcat', 'foobarflapcat', ]\n      help ( jr probe ), ( type )\n      try\n        isa.validate[ type ] probe\n        urge 'ok'\n      catch error\n        warn error.message\n  #.........................................................................................................\n  info isa.supertype_of_type 'safe_integer'\n  info isa.supertype_of_type 'foobarcat'\n  info isa.supertype_of_type 'foobarflapcat'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_object_shapes_ng = ->\n  isa.add_type 'nonempty_text', ( x ) -> ( @text x  ) and ( @nonempty x )\n  isa.add_type\n    name:       'triple'\n    supertype:  'integer'\n    tests:\n      isa_count:        ( x ) -> @count x\n      multiple_of_10:   ( x ) -> @multiple_of x, 3\n      not_too_big:      ( x ) -> x < 10\n  #.........................................................................................................\n  # debug isa.known_types()\n  for n in [ 3, 4.5, 6, 9, 12, ]\n    try\n      isa.validate.triple n\n    catch error\n      null\n    info 'µ33883', n, ( if error? then CND.red error.message else CND.lime 'ok' )\n  return ### !!!!!!!!!!!!!!!!!!!!!!!!!! ####\n  #.........................................................................................................\n  for n in [ -4 .. 10 ]\n    try\n      info n, ( isa.triple n ), ( isa.validate.triple n ) # , \"this is not a triple: $value\"\n    catch error\n      warn error.message\n  return ### !!!!!!!!!!!!!!!!!!!!!!!!!! ####\n  #.........................................................................................................\n  isa.add_type 'foobarcat',\n    supertype: 'pod'\n    tests:\n      isa_pod:                ( x ) -> @pod            x\n      has_keys:               ( x ) -> @has_keys       x, 'foo', 'bar', 'cat'\n      x_bar_is_nonempty_text: ( x ) -> @nonempty_text  x.bar\n      x_cat_is_nonempty_text: ( x ) -> @nonempty_text  x.cat\n  #.........................................................................................................\n  isa.add_type 'foobarflapcat',\n    supertype: 'foobarcat'\n    tests:\n      isa_foobarcat:          ( x ) -> @foobarcat  x\n      has_keys:               ( x ) -> @has_keys   x, 'flap'\n      # return false unless @count      x.flap\n  #.........................................................................................................\n  probes = [\n    { foo: 3, bar: 'a text', }\n    { foo: 3, bar: 'a text', cat: '', }\n    { foo: 3, bar: 'a text', cat: 'cats!', }\n    { foo: 3, bar: 'a text', cat: 'cats!', flap: 3, }\n    { foo: 3, bar: 'a text', cat: 'cats!', flap: -3, }\n    ]\n  #.........................................................................................................\n  for probe in probes\n    for type in [ 'foobarcat', 'foobarflapcat', ]\n      help ( jr probe ), ( type )\n      try\n        isa.validate[ type ] probe\n        urge 'ok'\n      catch error\n        throw error\n        warn error.message\n  #.........................................................................................................\n  info isa.supertype_of_type 'safe_integer'\n  info isa.supertype_of_type 'foobarcat'\n  info isa.supertype_of_type 'foobarflapcat'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_nested_errors = ->\n  # validate_isa_number   = ( x ) -> throw new Error \"µ1 not a number: #{rpr x}\"  unless isa.number x\n  # validate_isa_positive = ( x ) -> throw new Error \"µ2 not positive: #{rpr x}\"  unless x > 0\n  # validate_isa_even     = ( x ) -> throw new Error \"µ3 not even: #{rpr x}\"      unless x %% 2 is 0\n  # validate_isa_positive_even_number = ( x ) ->\n  #   validate_isa_number   x\n  #   validate_isa_positive x\n  #   validate_isa_even     x\n  # validate_isa_positive_even_number 42\n  # validate_isa_positive_even_number 42.3\n  # isa.add_type 'positive_even_number', ( x )\n\n############################################################################################################\n# demo()\n# demo_supertypes()\n# demo_object_shapes()\ndemo_object_shapes_ng()\n# demo_nested_errors()\n\n\n\n\n\n"
  ]
}