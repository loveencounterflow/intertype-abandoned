{
  "version": 3,
  "file": "tests.js",
  "sourceRoot": "..",
  "sources": [
    "src/tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'GUY-TEST/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require './main'\n\n\n#-----------------------------------------------------------------------------------------------------------\nread_file = ( route, handler ) ->\n  ( require 'fs' ).readFile route, { encoding: 'utf-8' }, ( error, text ) ->\n    return handler error, text\n\n#-----------------------------------------------------------------------------------------------------------\nfetch_data_from_network = ( url, handler ) ->\n  setImmediate => handler null, 'the webpage you requested'\n\n#-----------------------------------------------------------------------------------------------------------\nfetch_data_from_unreachable_network = ( url, handler ) ->\n  setImmediate => handler new Error \"network unreachable\"\n\n#-----------------------------------------------------------------------------------------------------------\nMETA = {}\n\n#===========================================================================================================\n# SYNCHRONOUS TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_sync; checks fail\" ] = ( T ) ->\n  { name } = T\n  checks = T.check META[ name ]\n  # debug '6654', checks\n  # debug '6654', JSON.stringify checks[ 0 ][ 'message' ]\n  # debug '6654', JSON.stringify checks[ 1 ][ 'message' ]\n  T.eq checks.length, 2\n  # debug '6654-1', rpr CND.remove_colors checks[ 0 ][ 'message' ]\n  T.eq ( CND.remove_colors checks[ 0 ][ 'message' ] ), 'not equal:\\n42\\n43\\nsee diff above'\n  T.eq ( CND.remove_colors checks[ 1 ][ 'message' ] ), \"not OK: false\"\n\n#...........................................................................................................\nMETA[ \"sync; checks fail\" ] = ( T ) ->\n  T.eq 42, 43\n  T.ok 'another test' == 'another spring'\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sync; fails because `xxx` is not recognized\" ] = ( T ) ->\n  { name } = T\n  checks = T.check META[ name ]\n  T.eq checks.length, 1\n  T.eq checks[ 0 ][ 'message' ], 'xxx is not defined'\n\n#...........................................................................................................\nMETA[ \"sync; fails because `xxx` is not recognized\" ] = ( T ) ->\n  xxx # variable is undefined\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sync; fails because argument to `T.ok` isn't `true`\" ] = ( T ) ->\n  { name } = T\n  checks = T.check META[ name ]\n  T.eq checks.length, 1\n  T.eq checks[ 0 ][ 'message' ], 'not OK: false'\n\n#...........................................................................................................\nMETA[ \"sync; fails because argument to `T.ok` isn't `true`\" ] = ( T ) ->\n  T.ok 123 == 456\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sync; calling `T.fail`, but proceeding with a successful test\" ] = ( T ) ->\n  { name } = T\n  checks = T.check META[ name ]\n  T.eq checks.length, 1\n  T.eq checks[ 0 ][ 'message' ], 'this was not in my plan'\n\n#...........................................................................................................\nMETA[ \"sync; calling `T.fail`, but proceeding with a successful test\" ] = ( T ) ->\n  T.fail \"this was not in my plan\"\n  T.eq 108, 108\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sync; `done` can be used in synchronous tests\" ] = ( T, done ) ->\n  n = 0\n  for idx in [ 0 ... 1e6 ]\n    n = ( Math.sin idx ) * ( Math.cos idx + 0.3 )\n  T.eq 1, 1\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sync; `throws` catches exception and tests against string\" ] = ( T ) ->\n  T.throws 'foo', ( -> throw new Error 'foo' )\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sync; `throws` catches exception and tests against regex\" ] = ( T ) ->\n  T.throws /expected!/, ( -> throw new Error 'now that was expected!' )\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_sync; show error message (demo)\" ] = ( T ) ->\n  T.eq \"this is the result, man\", \"This is what I expected, man!\"\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"sync; string mismatch produces colored diff message\" ] = ( T ) ->\n  warn \"skipping test; have to workout how to count failure as success and validate result, side-effects\"\n  # T.eq \"first string\", \"second string\"\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"sync; `throws` catches exception and rejects faulty matcher\" ] = ( T ) ->\n#   T.throws /^expected!/, ( -> throw new Error 'now that was expected!' )\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"sync; `throws` catches exception, rejects matcher of illegal type\" ] = ( T ) ->\n#   T.throws true, ( -> throw new Error 'now that was expected!' )\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"sync; `throws` catches exception and tests against callable matcher\" ] = ( T ) ->\n#   T.throws ( ( error ) -> T.eq error, 42 ), ( -> throw 42 )\n\n\n# # #===========================================================================================================\n# # # ASYNCHRONOUS TESTS\n# # #-----------------------------------------------------------------------------------------------------------\n# # @[ \"async; fails erroneously in async call\" ] = ( T, done ) ->\n# #   ### Try to read contents of a non-existing file: ###\n# #   read_file '/theres/almost/certainly/nosuchfile.txt', ( error, result ) ->\n# #     return done error if error?\n# #     ### You should never get an error from this line: ###\n# #     this line is never reached\n\n# # #-----------------------------------------------------------------------------------------------------------\n# # @[ \"async; fails erroneously in handler\" ] = ( T, done ) ->\n# #   fetch_data_from_network 'http://example.com', ( error, result ) ->\n# #     qqq # variable is undefined\n# #     done()\n\n# # #-----------------------------------------------------------------------------------------------------------\n# # @[ \"async; check fails in synchronous part\" ] = ( T, done ) ->\n# #   ### This will fail, but not stop test case execution: ###\n# #   T.eq 999, 444\n# #   fetch_data_from_network 'http://example.com', ( error, result ) ->\n# #     return done if error?\n# #     ### This will succeed: ###\n# #     T.eq 'the webpage you requested', result\n# #     done()\n\n# # #-----------------------------------------------------------------------------------------------------------\n# # @[ \"async; checks fail in handler\" ] = ( T, done ) ->\n# #   fetch_data_from_network 'http://example.com', ( error, result ) ->\n# #     return done if error?\n# #     ### An unreasonable combination of checks (always check your checks!): ###\n# #     T.ok result.length > 1e6    # expecting a lot of data (fails)\n# #     T.eq result, 'a short text' # expecting result to be some short text (fails as well)\n# #     done()\n\n# # #-----------------------------------------------------------------------------------------------------------\n# # @[ \"async; fails erroneously in synchronous part\" ] = ( T, done ) ->\n# #   yyy # variable is undefined\n# #   fetch_data_from_network 'http://example.com', ( error, result ) ->\n# #     return done error if error?\n# #     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"async; `rsvp_ok` accepts callback without error\" ] = ( T, done ) ->\n#   fetch_data_from_network 'http://example.com', T.rsvp_ok ( result ) ->\n#     T.eq result, 'the webpage you requested'\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"async; `rsvp_ok` complains on callback with error\" ] = ( T, done ) ->\n#   fetch_data_from_unreachable_network 'http://example.com', T.rsvp_ok ( result ) ->\n#     T.eq result, 'the webpage you requested'\n#     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"async; `rsvp_error` accepts callback with error\" ] = ( T, done ) ->\n#   fetch_data_from_unreachable_network 'http://example.com', T.rsvp_error /unreachable/, ->\n#     done()\n\n# # #-----------------------------------------------------------------------------------------------------------\n# # @[ \"async; `rsvp_error` complains on callback with error\" ] = ( T, done ) ->\n# #   fetch_data_from_unreachable_network 'http://example.com', T.rsvp_error ( result ) ->\n# #     T.eq result, 'the webpage you requested'\n# #     done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"async; fails to call `done` at all\" ] = ( T, done ) ->\n#   fetch_data_from_network 'http://example.com', ( error, result ) ->\n#     return done error if error?\n#     ### there should be a call to `done` here at some point, but it's missing ###\n#     # T.eq 22, 33\n#     # done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"async; fails to call `done` within timeout limits\" ] = ( T, done ) ->\n#   fetch_data_from_network 'http://example.com', ( error, result ) ->\n#     return done error if error?\n#     setTimeout done, 350\n\n# # #-----------------------------------------------------------------------------------------------------------\n# # @[ \"async; calls `fail` in handler\" ] = ( T, done ) ->\n# #   fetch_data_from_network 'http://example.com', ( error, result ) ->\n# #     return done error if error?\n# #     ### fail because because: ###\n# #     T.fail \"i'm not pleased\"\n# #     ### must still call done at some point: ###\n# #     done()\n\n############################################################################################################\nunless module.parent?\n  settings = 'timeout': 250\n  test @, settings\n\n\n\n"
  ]
}