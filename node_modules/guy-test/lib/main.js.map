{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n############################################################################################################\nnjs_domain                = require 'domain'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'TEST'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nASYNC                     = require 'async'\nDIFF                      = require 'diff'\nis_callable               = ( x ) -> ( Object::toString.call x ) in [ '[object Function]', '[object AsyncFunction]', ]\n{ jr }                    = CND\n\n#-----------------------------------------------------------------------------------------------------------\ndiff = ( a, b ) ->\n  parts = []\n  for part in DIFF.diffChars a, b\n    color = if part.added then 'green' else ( if part.removed then 'red' else 'white' )\n    parts.push CND[ color ] part.value\n  return parts.join ''\n\n\n\n# #===========================================================================================================\n# # TIMEOUT KEEPER\n# #-----------------------------------------------------------------------------------------------------------\n# call_with_timeout = ( timeout, test_name, method, P..., handler ) ->\n#   keeper_id = null\n#   #.........................................................................................................\n#   keeper = ->\n#     # clearTimeout keeper_id\n#     keeper_id = null\n#     warn \"(test: #{rpr test_name}) timeout reached; proceeding with error\"\n#     handler new Error \"µ64748 sorry, timeout reached (#{rpr timeout}ms)\"\n#   #.........................................................................................................\n#   keeper_id = setTimeout keeper, timeout\n#   #.........................................................................................................\n#   method P..., ( P1... ) ->\n#     if keeper_id?\n#       clearTimeout keeper_id\n#       keeper_id = null\n#       # help \"(test: #{rpr test_name}) timeout cancelled; proceeding as planned\"\n#       return handler P1...\n#     whisper \"(test: #{rpr test_name}) timeout already reached; ignoring\"\n\n\n#===========================================================================================================\n# TEST RUNNER\n#-----------------------------------------------------------------------------------------------------------\nmodule.exports = ( x, settings = null ) ->\n  ### TAINT should accept a handler in case testing contains asynchronous functions ###\n  ### Timeout for asynchronous operations: ###\n  settings               ?= {}\n  settings[ 'timeout'   ]?= 1000\n  #.........................................................................................................\n  stats =\n    'test-count':   0\n    'check-count':  0\n    'meta-count':   0\n    'pass-count':   0\n    'fail-count':   0\n    'failures':     {}\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  new_result_handler_and_tester = ( test_name ) ->\n    RH        = { 'name': test_name, }\n    T         = { 'name': test_name, }\n    keeper_id = null\n\n    #=======================================================================================================\n    # TIMEOUT KEEPER\n    #-------------------------------------------------------------------------------------------------------\n    RH.call_with_timeout = ( timeout, method, P..., handler ) ->\n      #.....................................................................................................\n      keeper = =>\n        # clearTimeout keeper_id\n        keeper_id = null\n        warn \"(test: #{rpr test_name}) timeout reached; proceeding with error\"\n        handler new Error \"µ65513 sorry, timeout reached (#{rpr timeout}ms) (#{rpr test_name})\"\n      #.....................................................................................................\n      keeper_id = setTimeout keeper, timeout\n      whisper \"started:   #{rpr test_name}\"\n      #.....................................................................................................\n      method P..., ( P1... ) =>\n        if keeper_id?\n          @clear_timeout()\n          return handler P1...\n        whisper \"(test: #{rpr test_name}) timeout already reached; ignoring\"\n\n    #-------------------------------------------------------------------------------------------------------\n    RH.clear_timeout = ->\n      if keeper_id?\n        # debug '©9XSyM', \"clearing timeout for #{rpr test_name}\"\n        clearTimeout keeper_id\n        keeper_id = null\n        return true\n      return false\n\n    #-------------------------------------------------------------------------------------------------------\n    # COMPLETION / SUCCESS / ERROR\n    #-------------------------------------------------------------------------------------------------------\n    RH.on_completion = ( handler ) ->\n      @clear_timeout()\n      whisper \"completed: #{rpr test_name}\"\n      handler()\n\n    #-------------------------------------------------------------------------------------------------------\n    RH.on_success = ->\n      stats[ 'pass-count' ] += 1\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    RH.on_error = ( delta, checked, error ) ->\n      # @clear_timeout()\n      stats[ 'fail-count' ]  += +1\n      delta                  += +1 unless error?\n      try\n        entry = CND.get_caller_info delta, error, yes\n      catch\n        throw error\n      throw error unless entry?\n      entry[ 'checked' ]      = checked\n      entry[ 'message' ]      = error?[ 'message' ] ? \"µ66278 Guy-test: received `null` as error\"\n      failures                = stats[ 'failures' ]\n      ( failures[ test_name ]?= [] ).push entry\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    # CHECKS\n    #-------------------------------------------------------------------------------------------------------\n    T.eq = ( P... ) ->\n      ### Tests whether all arguments are pairwise and deeply equal. Uses CoffeeNode Bits'n'Pieces' `equal`\n      for testing as (1) Node's `assert` distinguishes—unnecessarily—between shallow and deep equality, and,\n      worse, [`assert.equal` and `assert.deepEqual` are broken](https://github.com/joyent/node/issues/7161),\n      as they use JavaScript's broken `==` equality operator instead of `===`. ###\n      stats[ 'check-count' ] += 1\n      if CND.equals P...\n        RH.on_success()\n      else\n        if P.length is 2 # and ( CND.isa_text p0 = P[ 0 ] ) and ( CND.isa_text p1 = P[ 1 ] )\n          info \"string diff:\"\n          info diff ( rpr P[ 0 ] ), ( rpr P[ 1 ] )\n          message = \"\"\"\n          not equal:\n          #{CND.white   rpr P[ 0 ]}\n          #{CND.yellow  rpr P[ 1 ]}\n          \"\"\"\n        else\n          message = \"not equal: #{( rpr p for p in P ).join ', '}\"\n        RH.on_error   1, yes, new Error message\n\n    #-------------------------------------------------------------------------------------------------------\n    T.ok = ( result ) ->\n      ### Tests whether `result` is strictly `true` (not only true-ish). ###\n      stats[ 'check-count' ] += 1\n      if result is true then  RH.on_success()\n      else                    RH.on_error   1, yes, new Error \"µ67043 not OK: #{rpr result}\"\n\n    #-------------------------------------------------------------------------------------------------------\n    T.rsvp_ok = ( callback ) ->\n      return ( error, P... ) =>\n        throw error if error?\n        return callback P...\n\n    #-------------------------------------------------------------------------------------------------------\n    T.rsvp_error = ( test, callback ) ->\n      return ( error, P... ) =>\n        @test_error test, error\n        return callback P...\n\n    #-------------------------------------------------------------------------------------------------------\n    T.fail = ( message ) ->\n      ### Fail with message; do not terminate test execution. ###\n      stats[ 'check-count' ] += 1\n      RH.on_error 1, yes, new Error message\n\n    #-------------------------------------------------------------------------------------------------------\n    T.succeed = ( message ) ->\n      ### Succeed with message; do not terminate test execution. ###\n      stats[ 'check-count' ] += 1\n      help \"succeded: #{message}\"\n      RH.on_success message\n\n    #-------------------------------------------------------------------------------------------------------\n    T.test_error = ( test, error ) ->\n      switch type = CND.type_of test\n        when 'text'     then return @eq error?[ 'message' ], test\n        when 'regex'    then return @ok test.test error?[ 'message' ]\n        when 'function' then return @ok test error\n      throw new Error \"µ67808 expected a text, a RegEx or a function, got a #{type}\"\n\n    #-------------------------------------------------------------------------------------------------------\n    T.throws = ( test, method ) ->\n      # stats[ 'check-count' ] += 1\n      try\n        method()\n      catch error\n        return @test_error test, error\n      throw new Error \"µ68573 expected test to fail with exception, but none was thrown\"\n\n    #-------------------------------------------------------------------------------------------------------\n    T.check = ( method, callback = null ) ->\n      ### TAINT use `callback`? other handler? ###\n      try\n        method @\n      catch error\n        # debug '©x5edC', CND.get_caller_info_stack 0, error, 100, yes\n        # debug '©x5edC', CND.get_caller_info 0, error, yes\n        RH.on_error 0, no, error\n        # debug '©X5qsy', stats[ 'failures' ][ test_name ]\n      R =     stats[ 'failures' ][ test_name ] ? []\n      delete  stats[ 'failures' ][ test_name ]\n      stats[ 'fail-count' ] += -R.length\n      stats[ 'meta-count' ] += +R.length\n      return if callback? then callback R else R\n\n    #-------------------------------------------------------------------------------------------------------\n    T.perform = ( probe, matcher, error_pattern, method ) ->\n      switch ( arity = arguments.length )\n        when 3 then [ probe, matcher, error_pattern, method, ] = [ probe, matcher, null, error_pattern, ]\n        when 4 then null\n        else throw new Error \"µ69338 expected 3 or 4 arguments, got #{arity}\"\n      throw new Error \"µ70103 expected a function, got a #{CND.type_of method}\" unless is_callable method\n      message_re = new RegExp error_pattern if error_pattern?\n      try\n        result = await method()\n      catch error\n        # throw error\n        if message_re? and ( message_re.test error.message )\n          echo CND.green jr [ probe, null, error_pattern, ]\n          @ok true\n        else\n          echo CND.indigo \"µ70868 unexpected exception\", ( jr [ probe, null, error.message, ] )\n          stack = ( error.stack.split '\\n' )[ 1 .. 5 ].join '\\n'\n          @fail \"µ71633 unexpected exception for probe #{jr probe}:\\n#{error.message}\\n#{stack}\"\n          # whisper 'µ71634', ( error.stack.split '\\n' )[ .. 10 ].join '\\n'\n          # return reject \"µ72398 failed with #{error.message}\"\n        return null\n      if error_pattern?\n        echo CND.MAGENTA \"#{jr [ probe, result, null, ]} #! expected error: #{jr error_pattern}\"\n        @fail \"µ73163 expected error, obtained result #{jr result}\"\n      else if CND.equals result, matcher\n        @ok true\n        echo CND.lime jr [ probe, result, null, ]\n      else\n        @fail \"µ73773 neq: result #{jr result}, matcher #{jr matcher}\"\n        echo CND.red \"#{jr [ probe, result, null, ]} #! expected result: #{jr matcher}\"\n      return result\n\n    #-------------------------------------------------------------------------------------------------------\n    return [ RH, T, ]\n\n  #=========================================================================================================\n  # TEST EXECUTION\n  #---------------------------------------------------------------------------------------------------------\n  run = ->\n    tasks = []\n    x = { test: x, } if is_callable x\n    #.......................................................................................................\n    for test_name, test of x\n      continue if test_name[ 0 ] is '_'\n      stats[ 'test-count' ]  += 1\n      test                    = test.bind x\n      [ RH, T, ]              = new_result_handler_and_tester test_name\n      #.....................................................................................................\n      do ( test_name, test, RH, T ) =>\n        #...................................................................................................\n        switch arity = test.length\n\n          #-------------------------------------------------------------------------------------------------\n          # SYNCHRONOUS TESTS\n          #-------------------------------------------------------------------------------------------------\n          when 1\n            #...............................................................................................\n            tasks.push ( handler ) ->\n              whisper \"started:   #{rpr test_name}\"\n              try\n                test T\n              catch error\n                RH.on_error 0, no, error\n              whisper \"completed: #{rpr test_name}\"\n              handler()\n\n          #-------------------------------------------------------------------------------------------------\n          # ASYNCHRONOUS TESTS\n          #-------------------------------------------------------------------------------------------------\n          when 2\n            #...............................................................................................\n            tasks.push ( handler ) ->\n              domain = njs_domain.create()\n              #.............................................................................................\n              domain.on 'error', ( error ) ->\n                RH.on_error 0, no, error\n                RH.on_completion handler\n              #.............................................................................................\n              domain.run ->\n                done = ( error ) ->\n                  if error?\n                    RH.on_error 0, no, error\n                  RH.on_completion handler\n                #...........................................................................................\n                try\n                  RH.call_with_timeout settings[ 'timeout' ], test, T, done\n                #...........................................................................................\n                catch error\n                  RH.on_error 0, no, error\n                  RH.on_completion handler\n\n          #-------------------------------------------------------------------------------------------------\n          else throw new Error \"µ73928 expected test with 1 or 2 arguments, got one with #{arity}\"\n\n    #-------------------------------------------------------------------------------------------------------\n    ASYNC.series tasks, ( error ) =>\n      throw error if error?\n      report()\n\n  #---------------------------------------------------------------------------------------------------------\n  report = ->\n    help \"                             --=#=--\"\n    help \"                         GUY TEST REPORT\"\n    help \"                             --=#=--\"\n    #.......................................................................................................\n    for test_name, entries of stats[ 'failures' ]\n      help \"test case: #{rpr test_name}\"\n      #.....................................................................................................\n      for entry in entries\n        warn entry[ 'message' ]\n        warn '  checked:', entry[ 'checked' ]\n        warn '  ' + entry[ 'route' ] + '#' + entry[ 'line-nr' ]\n        warn '  ' + entry[ 'source' ]\n    #.......................................................................................................\n    pass_count = stats[ 'pass-count' ]\n    fail_count = stats[ 'fail-count' ]\n    info()\n    info 'tests:   ',   stats[ 'test-count'  ]\n    info 'checks:  ',   stats[ 'check-count' ]\n    info 'metas:   ',   stats[ 'meta-count'  ]\n    ( if fail_count > 0 then whisper  else help    ) 'passes:  ', stats[ 'pass-count'  ]\n    ( if fail_count > 0 then warn     else whisper ) 'fails:   ', fail_count\n    process.exit fail_count\n\n  #---------------------------------------------------------------------------------------------------------\n  run()\n\n\n"
  ]
}