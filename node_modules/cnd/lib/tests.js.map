{
  "version": 3,
  "file": "tests.js",
  "sourceRoot": "..",
  "sources": [
    "src/tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nTRM                       = require './TRM'\nrpr                       = TRM.rpr.bind TRM\nbadge                     = 'CND/test'\nlog                       = TRM.get_logger 'plain',     badge\ninfo                      = TRM.get_logger 'info',      badge\nwhisper                   = TRM.get_logger 'whisper',   badge\nalert                     = TRM.get_logger 'alert',     badge\ndebug                     = TRM.get_logger 'debug',     badge\nwarn                      = TRM.get_logger 'warn',      badge\nhelp                      = TRM.get_logger 'help',      badge\nurge                      = TRM.get_logger 'urge',      badge\npraise                    = TRM.get_logger 'praise',    badge\necho                      = TRM.echo.bind TRM\n#...........................................................................................................\nCND                       = require './main'\ntest                      = require 'guy-test'\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# eq = ( P... ) =>\n#   whisper P\n#   # throw new Error \"not equal: \\n#{( ( rpr p ) for p in P ).join '\\n'}\" unless CND.equals P...\n#   unless CND.equals P...\n#     warn \"not equal: \\n#{( ( rpr p ) for p in P ).join '\\n'}\"\n#     return 1\n#   return 0\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_test = ->\n#   error_count = 0\n#   for name, method of @\n#     continue if name.startsWith '_'\n#     whisper name\n#     try\n#       method()\n#     catch error\n#       # throw error\n#       error_count += +1\n#       warn error[ 'message' ]\n#   help \"tests completed successfully\" if error_count is 0\n#   process.exit error_count\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"test type_of\" ] = ( T ) ->\n  T.eq ( CND.type_of new WeakMap()            ), 'weakmap'\n  T.eq ( CND.type_of new Map()                ), 'map'\n  T.eq ( CND.type_of new Set()                ), 'set'\n  T.eq ( CND.type_of new Date()               ), 'date'\n  T.eq ( CND.type_of new Error()              ), 'error'\n  T.eq ( CND.type_of []                       ), 'list'\n  T.eq ( CND.type_of true                     ), 'boolean'\n  T.eq ( CND.type_of false                    ), 'boolean'\n  T.eq ( CND.type_of ( -> )                   ), 'function'\n  T.eq ( CND.type_of ( -> yield 123 )()       ), 'generator'\n  T.eq ( CND.type_of null                     ), 'null'\n  T.eq ( CND.type_of 'helo'                   ), 'text'\n  T.eq ( CND.type_of undefined                ), 'undefined'\n  T.eq ( CND.type_of arguments                ), 'arguments'\n  T.eq ( CND.type_of global                   ), 'global'\n  T.eq ( CND.type_of /^xxx$/g                 ), 'regex'\n  T.eq ( CND.type_of {}                       ), 'pod'\n  T.eq ( CND.type_of NaN                      ), 'nan'\n  T.eq ( CND.type_of 1 / 0                    ), 'infinity'\n  T.eq ( CND.type_of -1 / 0                   ), 'infinity'\n  T.eq ( CND.type_of 12345                    ), 'number'\n  T.eq ( CND.type_of new Buffer 'helo'        ), 'buffer'\n  T.eq ( CND.type_of new ArrayBuffer 42       ), 'arraybuffer'\n  #.........................................................................................................\n  T.eq ( CND.type_of new Int8Array         5  ), 'int8array'\n  T.eq ( CND.type_of new Uint8Array        5  ), 'uint8array'\n  T.eq ( CND.type_of new Uint8ClampedArray 5  ), 'uint8clampedarray'\n  T.eq ( CND.type_of new Int16Array        5  ), 'int16array'\n  T.eq ( CND.type_of new Uint16Array       5  ), 'uint16array'\n  T.eq ( CND.type_of new Int32Array        5  ), 'int32array'\n  T.eq ( CND.type_of new Uint32Array       5  ), 'uint32array'\n  T.eq ( CND.type_of new Float32Array      5  ), 'float32array'\n  T.eq ( CND.type_of new Float64Array      5  ), 'float64array'\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"test size_of\" ] = ( T ) ->\n  # debug ( new Buffer '𣁬', ), ( '𣁬'.codePointAt 0 ).toString 16\n  # debug ( new Buffer '𡉜', ), ( '𡉜'.codePointAt 0 ).toString 16\n  # debug ( new Buffer '𠑹', ), ( '𠑹'.codePointAt 0 ).toString 16\n  # debug ( new Buffer '𠅁', ), ( '𠅁'.codePointAt 0 ).toString 16\n  T.eq ( CND.size_of [ 1, 2, 3, 4, ]                                    ), 4\n  T.eq ( CND.size_of new Buffer [ 1, 2, 3, 4, ]                         ), 4\n  T.eq ( CND.size_of '𣁬𡉜𠑹𠅁'                                             ), 2 * ( Array.from '𣁬𡉜𠑹𠅁' ).length\n  T.eq ( CND.size_of '𣁬𡉜𠑹𠅁', count: 'codepoints'                        ), ( Array.from '𣁬𡉜𠑹𠅁' ).length\n  T.eq ( CND.size_of '𣁬𡉜𠑹𠅁', count: 'codeunits'                         ), 2 * ( Array.from '𣁬𡉜𠑹𠅁' ).length\n  T.eq ( CND.size_of '𣁬𡉜𠑹𠅁', count: 'bytes'                             ), ( new Buffer '𣁬𡉜𠑹𠅁', 'utf-8' ).length\n  T.eq ( CND.size_of 'abcdefghijklmnopqrstuvwxyz'                       ), 26\n  T.eq ( CND.size_of 'abcdefghijklmnopqrstuvwxyz', count: 'codepoints'  ), 26\n  T.eq ( CND.size_of 'abcdefghijklmnopqrstuvwxyz', count: 'codeunits'   ), 26\n  T.eq ( CND.size_of 'abcdefghijklmnopqrstuvwxyz', count: 'bytes'       ), 26\n  T.eq ( CND.size_of 'ä'                                                ), 1\n  T.eq ( CND.size_of 'ä', count: 'codepoints'                           ), 1\n  T.eq ( CND.size_of 'ä', count: 'codeunits'                            ), 1\n  T.eq ( CND.size_of 'ä', count: 'bytes'                                ), 2\n  T.eq ( CND.size_of new Map [ [ 'foo', 42, ], [ 'bar', 108, ], ]       ), 2\n  T.eq ( CND.size_of new Set [ 'foo', 42, 'bar', 108, ]                 ), 4\n  T.eq ( CND.size_of { 'foo': 42, 'bar': 108, 'baz': 3, }                           ), 3\n  T.eq ( CND.size_of { '~isa': 'XYZ/yadda', 'foo': 42, 'bar': 108, 'baz': 3, }      ), 4\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"is_subset\" ] = ( T ) ->\n  T.eq false, CND.is_subset ( Array.from 'abcde' ), ( Array.from 'abcd' )\n  T.eq false, CND.is_subset ( Array.from 'abcx'  ), ( Array.from 'abcd' )\n  T.eq false, CND.is_subset ( Array.from 'abcd'  ), ( []                )\n  T.eq true,  CND.is_subset ( Array.from 'abcd'  ), ( Array.from 'abcd' )\n  T.eq true,  CND.is_subset ( Array.from 'abc'   ), ( Array.from 'abcd' )\n  T.eq true,  CND.is_subset ( []                 ), ( Array.from 'abcd' )\n  T.eq true,  CND.is_subset ( []                 ), ( Array.from []     )\n  T.eq false, CND.is_subset ( new Set 'abcde'    ), ( new Set 'abcd'    )\n  T.eq false, CND.is_subset ( new Set 'abcx'     ), ( new Set 'abcd'    )\n  T.eq false, CND.is_subset ( new Set 'abcx'     ), ( new Set()         )\n  T.eq true,  CND.is_subset ( new Set 'abcd'     ), ( new Set 'abcd'    )\n  T.eq true,  CND.is_subset ( new Set 'abc'      ), ( new Set 'abcd'    )\n  T.eq true,  CND.is_subset ( new Set()          ), ( new Set 'abcd'    )\n  T.eq true,  CND.is_subset ( new Set()          ), ( new Set()         )\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"deep_copy\" ] = ( T ) ->\n  ### TAINT set comparison doesn't work ###\n  probes = [\n    [ 'foo', 42, [ 'bar', ( -> 'xxx' ), ], { q: 'Q', s: 'S', }, ]\n    ]\n  # probe   = [ 'foo', 42, [ 'bar', ( -> 'xxx' ), ], ( new Set Array.from 'abc' ), ]\n  # matcher = [ 'foo', 42, [ 'bar', ( -> 'xxx' ), ], ( new Set Array.from 'abc' ), ]\n  for probe in probes\n    result  = CND.deep_copy probe\n    T.eq result, probe\n    T.ok result isnt probe\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"XJSON (1)\" ] = ( T ) ->\n  e         = new Set 'xy'\n  e.add new Set 'abc'\n  d         = [ 'A', 'B', e, ]\n  T.eq (     CND.XJSON.stringify d                 ), \"\"\"[\"A\",\"B\",{\"~isa\":\"-x-set\",\"%self\":[\"x\",\"y\",{\"~isa\":\"-x-set\",\"%self\":[\"a\",\"b\",\"c\"]}]}]\"\"\"\n  ### TAINT doing string comparison here to avoid implicit test that T.eq deals with sets correctly ###\n  T.eq ( rpr CND.XJSON.parse CND.XJSON.stringify d ), \"\"\"[ 'A', 'B', Set { 'x', 'y', Set { 'a', 'b', 'c' } } ]\"\"\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"XJSON (2)\" ] = ( T ) ->\n  s   = new Set Array.from 'Popular Mechanics'\n  m   = new Map [ [ 'a', 1, ], [ 'b', 2, ], ]\n  f   = ( x ) -> x ** 2\n  d   = { s, m, f, }\n  #.........................................................................................................\n  d_json     = CND.XJSON.stringify d\n  d_ng       = CND.XJSON.parse     d_json\n  d_ng_json  = CND.XJSON.stringify d_ng\n  T.eq d_json, d_ng_json\n  #.........................................................................................................\n  ### TAINT using T.eq directly on values, not their alternative serialization would implicitly test whether\n  CND.equals accepts sets and maps ###\n  T.eq ( rpr d_ng[ 's' ] ), ( rpr d[ 's' ] )\n  T.eq ( rpr d_ng[ 'm' ] ), ( rpr d[ 'm' ] )\n  T.eq d_ng[ 'f' ], d[ 'f' ]\n  T.eq ( d_ng[ 'f' ] 12 ), ( d[ 'f' ] 12 )\n  T.eq ( d_ng[ 'f' ] 12 ), 144\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"XJSON (3)\" ] = ( T ) ->\n  d =\n    my_number:          42\n    my_buffer:          Buffer.from     [ 127, 128, 129, ]\n    my_null:            null\n    my_nan:             NaN\n    my_local_symbol:    Symbol    'local-symbol'\n    my_global_symbol:   Symbol.for 'global-symbol'\n    # my_arraybuffer:   new ArrayBuffer 3\n  #.........................................................................................................\n  d[ Symbol.for 'foo' ] = 'bar'\n  d[ Symbol     'FOO' ] = 'BAR'\n  #.........................................................................................................\n  # help '01220', rpr d\n  d_json  = CND.XJSON.stringify d\n  d_ng    = CND.XJSON.parse d_json\n  T.eq d_ng.my_number,        d.my_number\n  T.eq d_ng.my_buffer,        d.my_buffer\n  T.eq d_ng.my_null,          d.my_null\n  T.eq d_ng.my_nan,           d.my_nan\n  T.eq d_ng.my_global_symbol, d.my_global_symbol\n  ### NOTE it's not possible to recreate the identity of a local symbol, so we check value and status: ###\n  T.eq d_ng.my_local_symbol.toString(),  d.my_local_symbol.toString()\n  d_ng_text = d_ng.my_local_symbol.toString().replace /^Symbol\\((.*)\\)$/, '$1'\n  T.ok d.my_local_symbol isnt Symbol.for d_ng_text\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"logging with timestamps\" ] = ( T, done ) ->\n  my_badge                  = 'BITSNPIECES/test'\n  my_info                   = TRM.get_logger 'info',      badge\n  my_help                   = TRM.get_logger 'help',      badge\n  my_info 'helo'\n  my_help 'world'\n  done()\n\n\n#===========================================================================================================\n# SUSPEND\n#-----------------------------------------------------------------------------------------------------------\n@[ \"suspend (basic)\" ] = ( T, done ) ->\n  { step, } = CND.suspend\n  count     = 0\n  wait      = ( handler ) -> setTimeout ( -> handler null, 'yes' ), 250\n  step ( resume ) ->\n    # debug JSON.stringify( name for name of @ ), @ is global, setTimeout\n    loop\n      count += +1\n      break if count >= 5\n      yield wait resume\n      urge count\n    T.eq count, 5\n    help 'ok'\n    done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"suspend (with ordinary function)\" ] = ( T, done ) ->\n  { step, } = CND.suspend\n  T.throws 'expected a generator function, got a function', ( -> step ( resume ) -> xxx )\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"suspend (with custom this)\" ] = ( T, done ) ->\n  { step\n    after } = CND.suspend\n  count     = 0\n  my_ctx    =\n    foo:  42\n    wait: ( dts, handler ) -> whisper 'before'; after dts, -> handler null, 'yes'\n  step my_ctx, ( resume ) ->\n    # debug JSON.stringify( name for name of @ ), @ is global, setTimeout\n    loop\n      count += +1\n      whisper yield @wait 0.250, resume\n      break if count >= 5\n      urge count\n    T.eq count, 5\n    help 'ok'\n    done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"isa-generator\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ ( -> ),                       no,   no,   'function',           ]\n    [ ( -> yield 42 ),              no,   yes,  'generatorfunction',  ]\n    [ ( -> yield 42 )(),            yes,  no,   'generator',          ]\n    ]\n  jr = JSON.stringify\n  for [ probe, is_gen, is_genf, type, ] in probes_and_matchers\n    result_is_gen  = CND.isa_generator           probe\n    result_is_genf = CND.isa_generator_function  probe\n    # debug jr [ probe, result_is_gen, result_is_genf, ]\n    # debug ( CND.isa_function probe ), probe.constructor.name\n    T.eq result_is_gen,  is_gen\n    T.eq result_is_genf, is_genf\n    T.eq ( CND.type_of probe ), type\n  done()\n\n#===========================================================================================================\n# MAIN\n#-----------------------------------------------------------------------------------------------------------\n@_main = ( handler ) ->\n  test @, 'timeout': 2500\n\n#-----------------------------------------------------------------------------------------------------------\n@_prune = ->\n  for name, value of @\n    continue if name.startsWith '_'\n    delete @[ name ] unless name in include\n  return null\n\n############################################################################################################\nunless module.parent?\n  include = [\n    \"test type_of\"\n    \"test size_of\"\n    \"is_subset\"\n    \"deep_copy\"\n    \"XJSON (1)\"\n    \"XJSON (2)\"\n    \"XJSON (3)\"\n    \"logging with timestamps\"\n    \"suspend (basic)\"\n    \"suspend (with ordinary function)\"\n    \"suspend (with custom this)\"\n    \"isa-generator\"\n    ]\n  @_prune()\n  @_main()\n"
  ]
}